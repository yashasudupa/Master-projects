type token =
  | ID of (string)
  | BIN_CONST of (Int32.t * int)
  | BIN_CONST_64 of (Int64.t * int)
  | CARD_CONST of (Int32.t)
  | CARD_CONST_64 of (Int64.t)
  | FIXED_CONST of (float)
  | STRING_CONST of (string)
  | DOLLAR
  | ACTION
  | ALIAS
  | ATTR
  | BOOL
  | CANON
  | CARD
  | CASE
  | COERCE
  | DEFAULT
  | DO
  | ELSE
  | ENDDO
  | ENDIF
  | ENUM
  | ERROR
  | EXTEND
  | FIX
  | FLOAT
  | FOR
  | FORMAT
  | IF
  | IN
  | IMAGE
  | INITIALA
  | INT
  | LET of (int)
  | MEM of (int)
  | MODE of (int)
  | OP of (int)
  | REG of (int)
  | SWITCH
  | SYNTAX
  | THEN
  | TYPE of (int)
  | VAR of (int)
  | VOLATILE
  | PORTS
  | RESOURCE of (int)
  | USES
  | EXCEPTION of (int)
  | MACRO
  | EOF
  | NOT
  | OR
  | AND
  | LEQ
  | GEQ
  | EQU
  | NEQ
  | LEFT_SHIFT
  | RIGHT_SHIFT
  | DOUBLE_STAR
  | ROTATE_RIGHT
  | ROTATE_LEFT
  | DOUBLE_COLON
  | DOUBLE_DOT
  | BIT_LEFT
  | BIT_RIGHT
  | EQ
  | EXCLAM
  | PIPE
  | CIRC
  | AMPERS
  | GT
  | LT
  | SHARP
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | PERCENT
  | TILD
  | COLON
  | COMMA
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | LPAREN
  | RPAREN
  | SEMI
  | DOT
  | AROBAS

open Parsing;;
let _ = parse_error;;
# 24 "parser.mly"
let eline e = Irg.ELINE (!(Lexer.file), !(Lexer.line), e)
let line s = Irg.LINE (!(Lexer.file), !(Lexer.line), s)


(** Raise an error at the current parsing position.
	@param f	Function to display error. *)
let error f =
		raise (Irg.Error (fun out -> Printf.fprintf out "%s:%d: " !(Lexer.file) !(Lexer.line); f out))


(** Handle an expression in the parser, i.e. put source file/line information
	or add file/line information when an error is raised.
	@param f			Function to perform expression building. It is called with () argument.
	@return				Built expression.
	@raise Irg.Error	If there is an error. *)
let handle_expr f =
	try
		Irg.ELINE (!(Lexer.file), !(Lexer.line), f ())
	with Irg.PreError ef ->
		error ef


(** Handle an statement in the parser, i.e. put source file/line information
	or add file/line information when an error is raised.
	@param f			Function to perform statement building. It is called with () argument.
	@return				Built statement.
	@raise Irg.Error	If there is an error. *)
let handle_stat f =
	try
		Irg.LINE (!(Lexer.file), !(Lexer.line), f ())
	with Irg.PreError ef ->
		error ef


(** Raise a syntax error exception.
	@param msg	Error message.
	@raise Irg.SyntaxError	Syntax error. *)
let syntax_error msg =
	raise (Irg.SyntaxError msg)


(** Intersect parameter declaration.
	@param pars1		First list of parameters.
	@param pars2		Second list of parameters.
	@return				Intersection of lists. *)
let intersect_params pars1 pars2 : (string * Irg.typ) list =
	List.fold_left
		(fun res par -> if List.mem par pars1 then par::res else res)
		[]
		pars2


(** Intersect two list of attributes to provide a common context for
	extending a list of symbols.
	@param attrs1		First list of symbols.
	@param attrs2		Second list of symbols.
	@return				Intersection of both lists. *)
let intersect_attrs attrs1 attrs2 =
	let equal attr1 attr2 =
		match (attr1, attr2) with
		| (Irg.ATTR_EXPR (n1, _), Irg.ATTR_EXPR (n2, _))
		| (Irg.ATTR_LOC (n1, _), Irg.ATTR_LOC (n2, _))
		| (Irg.ATTR_STAT (n1, _), Irg.ATTR_STAT (n2, _)) when n1 = n2 -> true
		| _ -> false in
	let member_of attr attrs = List.exists (fun item -> equal attr item) attrs in
	List.fold_left (fun res attr -> if member_of attr attrs2 then attr::res else res) [] attrs1


(** Get information to extend the symbol x.
	@param x				Name of the symbol to extend (must an AND-op or an AND-mode).
	@return					(specification of the symbol, list of parameters, list of attributes)
	@raise Irg.Error		If the symbol is not extensible. *)
let get_spec_extend x =
	let sym = Irg.get_symbol x in
	match sym with
	| Irg.AND_MODE (_, pars, _, attrs)
	| Irg.AND_OP (_, pars, attrs) ->
		(sym, pars, attrs)
	| Irg.UNDEF ->
		Irg.error (Irg.asis (Printf.sprintf "symbol %s does not exists" x))
	| _ ->
		Irg.error (Irg.asis (Printf.sprintf "can not extend %s" x))

# 181 "parser.ml"
let yytransl_const = [|
  264 (* DOLLAR *);
  265 (* ACTION *);
  266 (* ALIAS *);
  267 (* ATTR *);
  268 (* BOOL *);
  269 (* CANON *);
  270 (* CARD *);
  271 (* CASE *);
  272 (* COERCE *);
  273 (* DEFAULT *);
  274 (* DO *);
  275 (* ELSE *);
  276 (* ENDDO *);
  277 (* ENDIF *);
  278 (* ENUM *);
  279 (* ERROR *);
  280 (* EXTEND *);
  281 (* FIX *);
  282 (* FLOAT *);
  283 (* FOR *);
  284 (* FORMAT *);
  285 (* IF *);
  286 (* IN *);
  287 (* IMAGE *);
  288 (* INITIALA *);
  289 (* INT *);
  295 (* SWITCH *);
  296 (* SYNTAX *);
  297 (* THEN *);
  300 (* VOLATILE *);
  301 (* PORTS *);
  303 (* USES *);
  305 (* MACRO *);
    0 (* EOF *);
  306 (* NOT *);
  307 (* OR *);
  308 (* AND *);
  309 (* LEQ *);
  310 (* GEQ *);
  311 (* EQU *);
  312 (* NEQ *);
  313 (* LEFT_SHIFT *);
  314 (* RIGHT_SHIFT *);
  315 (* DOUBLE_STAR *);
  316 (* ROTATE_RIGHT *);
  317 (* ROTATE_LEFT *);
  318 (* DOUBLE_COLON *);
  319 (* DOUBLE_DOT *);
  320 (* BIT_LEFT *);
  321 (* BIT_RIGHT *);
  322 (* EQ *);
  323 (* EXCLAM *);
  324 (* PIPE *);
  325 (* CIRC *);
  326 (* AMPERS *);
  327 (* GT *);
  328 (* LT *);
  329 (* SHARP *);
  330 (* PLUS *);
  331 (* MINUS *);
  332 (* STAR *);
  333 (* SLASH *);
  334 (* PERCENT *);
  335 (* TILD *);
  336 (* COLON *);
  337 (* COMMA *);
  338 (* LBRACE *);
  339 (* RBRACE *);
  340 (* LBRACK *);
  341 (* RBRACK *);
  342 (* LPAREN *);
  343 (* RPAREN *);
  344 (* SEMI *);
  345 (* DOT *);
  346 (* AROBAS *);
    0|]

let yytransl_block = [|
  257 (* ID *);
  258 (* BIN_CONST *);
  259 (* BIN_CONST_64 *);
  260 (* CARD_CONST *);
  261 (* CARD_CONST_64 *);
  262 (* FIXED_CONST *);
  263 (* STRING_CONST *);
  290 (* LET *);
  291 (* MEM *);
  292 (* MODE *);
  293 (* OP *);
  294 (* REG *);
  298 (* TYPE *);
  299 (* VAR *);
  302 (* RESOURCE *);
  304 (* EXCEPTION *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\002\000\002\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\005\000\
\005\000\012\000\018\000\018\000\019\000\019\000\015\000\015\000\
\015\000\015\000\015\000\020\000\020\000\021\000\021\000\013\000\
\022\000\022\000\006\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\024\000\024\000\025\000\025\000\016\000\007\000\
\029\000\008\000\009\000\027\000\027\000\030\000\030\000\017\000\
\017\000\028\000\028\000\031\000\031\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\034\000\034\000\036\000\036\000\
\010\000\010\000\039\000\039\000\011\000\011\000\011\000\014\000\
\042\000\043\000\043\000\041\000\041\000\038\000\038\000\038\000\
\044\000\045\000\045\000\040\000\040\000\046\000\046\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\048\000\
\035\000\035\000\049\000\049\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\054\000\054\000\053\000\053\000\053\000\055\000\055\000\
\051\000\051\000\051\000\051\000\051\000\051\000\052\000\052\000\
\052\000\056\000\056\000\057\000\057\000\059\000\059\000\058\000\
\058\000\061\000\060\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\063\000\063\000\063\000\063\000\063\000\063\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\062\000\062\000\065\000\065\000\064\000\064\000\067\000\
\066\000\033\000\033\000\068\000\068\000\069\000\069\000\071\000\
\071\000\070\000\070\000\070\000\070\000\070\000\072\000\072\000\
\074\000\075\000\075\000\075\000\076\000\076\000\078\000\078\000\
\077\000\077\000\079\000\079\000\080\000\080\000\073\000\073\000\
\081\000\081\000\082\000\082\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\004\000\
\006\000\002\000\001\000\003\000\001\000\004\000\005\000\006\000\
\004\000\005\000\003\000\001\000\003\000\001\000\003\000\002\000\
\001\000\003\000\004\000\001\000\004\000\004\000\006\000\006\000\
\005\000\004\000\001\000\003\000\001\000\003\000\001\000\006\000\
\005\000\002\000\006\000\003\000\001\000\003\000\001\000\001\000\
\001\000\000\000\001\000\001\000\002\000\003\000\003\000\005\000\
\003\000\003\000\003\000\005\000\001\000\006\000\001\000\004\000\
\007\000\004\000\000\000\002\000\006\000\004\000\003\000\002\000\
\002\000\001\000\003\000\001\000\003\000\000\000\001\000\003\000\
\003\000\001\000\001\000\000\000\001\000\001\000\002\000\003\000\
\005\000\003\000\003\000\005\000\003\000\003\000\002\000\001\000\
\000\000\002\000\001\000\003\000\000\000\001\000\001\000\002\000\
\003\000\003\000\003\000\001\000\004\000\004\000\004\000\006\000\
\004\000\006\000\008\000\000\000\001\000\003\000\000\000\005\000\
\001\000\006\000\004\000\009\000\003\000\003\000\006\000\006\000\
\007\000\000\000\002\000\001\000\003\000\000\000\001\000\001\000\
\002\000\004\000\003\000\006\000\002\000\006\000\002\000\004\000\
\003\000\003\000\003\000\003\000\001\000\002\000\004\000\003\000\
\006\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\002\000\002\000\
\003\000\003\000\003\000\002\000\003\000\007\000\002\000\007\000\
\002\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\002\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\001\000\001\000\
\001\000\001\000\003\000\000\000\001\000\001\000\002\000\004\000\
\003\000\001\000\003\000\001\000\003\000\001\000\006\000\000\000\
\002\000\001\000\003\000\003\000\005\000\005\000\001\000\004\000\
\002\000\000\000\002\000\002\000\004\000\007\000\002\000\007\000\
\000\000\002\000\000\000\004\000\001\000\001\000\001\000\003\000\
\002\000\006\000\000\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\005\001\000\000\003\000\
\005\000\006\000\007\000\008\000\009\000\010\000\011\000\012\000\
\013\000\014\000\015\000\000\000\000\000\057\000\000\000\036\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\056\000\
\082\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\019\000\033\000\000\000\001\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\050\000\
\000\000\060\000\000\000\000\000\000\000\000\000\000\000\080\000\
\000\000\094\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\198\000\199\000\196\000\197\000\195\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\194\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000\103\000\000\000\000\000\000\000\000\000\000\000\
\095\000\000\000\025\000\000\000\030\000\000\000\028\000\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\000\000\158\000\
\000\000\000\000\149\000\000\000\151\000\000\000\191\000\000\000\
\193\000\000\000\000\000\000\000\000\000\000\000\188\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\083\000\016\000\000\000\000\000\000\000\084\000\000\000\
\000\000\000\000\087\000\000\000\000\000\000\000\000\000\055\000\
\000\000\035\000\000\000\000\000\020\000\034\000\000\000\000\000\
\000\000\066\000\000\000\063\000\062\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\228\000\230\000\234\000\000\000\
\239\000\255\000\102\000\000\000\000\000\000\000\000\000\099\000\
\098\000\000\000\000\000\000\000\023\000\038\000\000\000\000\000\
\042\000\000\000\000\000\037\000\160\000\000\000\155\000\154\000\
\153\000\000\000\000\000\000\000\000\000\000\000\000\000\189\000\
\187\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\201\000\216\000\
\215\000\217\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\000\000\022\000\000\000\
\000\000\110\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\107\000\000\000\116\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\241\000\000\000\
\000\000\000\000\000\000\031\000\029\000\046\000\044\000\000\000\
\000\000\159\000\000\000\152\000\000\000\000\000\000\000\000\000\
\041\000\000\000\000\000\204\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
\017\000\052\000\048\000\085\000\091\000\090\000\089\000\088\000\
\000\000\000\000\077\000\054\000\051\000\000\000\000\000\112\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\068\000\000\000\000\000\000\000\000\000\000\000\000\000\
\064\000\000\000\000\000\235\000\000\000\000\000\236\000\000\000\
\229\000\000\000\000\000\000\000\000\001\000\000\253\000\254\000\
\247\000\000\000\243\000\000\000\244\000\097\000\100\000\039\000\
\040\000\000\000\000\000\000\000\000\000\000\000\214\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\073\000\000\000\000\000\114\000\113\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\134\000\
\108\000\133\000\000\000\000\000\072\000\000\000\000\000\000\000\
\000\000\000\000\240\000\000\000\000\000\000\000\000\000\000\000\
\148\000\150\000\000\000\000\000\000\000\000\000\000\000\222\000\
\161\000\000\000\000\000\117\000\118\000\000\000\000\000\000\000\
\000\000\000\000\000\000\121\000\000\000\000\000\000\000\000\000\
\000\000\000\000\237\000\238\000\245\000\000\000\000\000\190\000\
\000\000\192\000\223\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\070\000\128\000\004\001\
\002\001\233\000\231\000\000\000\000\000\000\000\000\000\000\000\
\219\000\130\000\000\000\000\000\000\000\139\000\135\000\136\000\
\000\000\000\000\000\000\000\000\000\000\144\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\137\000\145\000\000\000\
\000\000\246\000\248\000\000\000\000\000\000\000\000\000\000\000\
\141\000\132\000\146\000\147\000"

let yydgoto = "\002\000\
\014\000\015\000\132\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\137\000\
\133\000\052\000\053\000\134\000\135\000\055\000\040\000\138\000\
\139\000\098\000\190\000\064\000\028\000\201\000\065\000\066\000\
\219\000\210\000\057\001\211\000\023\001\194\000\122\001\072\000\
\192\000\029\000\042\000\195\000\119\001\073\000\074\000\232\000\
\058\001\059\001\060\001\061\001\251\000\062\001\069\001\003\002\
\027\002\028\002\029\002\041\002\030\002\221\001\099\000\222\001\
\223\001\253\001\224\001\220\000\221\000\222\000\242\001\223\000\
\224\000\225\000\079\001\080\001\163\001\081\001\165\001\161\001\
\226\000\240\001"

let yysindex = "\024\000\
\141\008\000\000\131\000\046\255\097\255\097\255\097\255\097\255\
\097\255\097\255\097\255\097\255\097\255\000\000\149\010\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\252\255\000\000\054\255\000\000\
\073\255\106\255\125\255\127\255\148\255\209\011\118\255\000\000\
\000\000\186\255\000\000\228\254\099\255\225\254\030\255\211\255\
\240\255\242\255\253\255\255\255\000\000\000\000\022\000\000\000\
\000\000\039\000\074\000\076\000\085\000\086\000\105\000\000\000\
\015\000\000\000\095\255\118\000\122\000\132\000\133\000\000\000\
\252\255\000\000\165\255\209\011\209\011\209\011\209\011\209\011\
\254\255\000\000\000\000\000\000\000\000\000\000\058\000\020\255\
\021\255\199\255\023\255\209\011\209\011\209\011\209\011\065\014\
\134\000\163\017\000\000\075\000\208\000\209\011\161\000\209\011\
\221\000\222\000\000\000\221\000\222\000\168\014\198\255\168\014\
\220\000\097\255\097\255\209\014\243\000\209\011\209\011\230\000\
\028\255\000\000\000\000\168\255\178\000\209\011\209\011\028\255\
\000\000\000\000\000\000\194\000\000\000\183\255\000\000\190\000\
\216\000\210\255\000\000\205\000\207\000\202\000\082\014\000\000\
\177\255\209\011\000\000\161\000\000\000\044\001\000\000\049\015\
\000\000\209\011\059\014\227\000\227\000\227\000\000\000\242\013\
\209\011\209\011\209\011\209\011\209\011\209\011\209\011\209\011\
\209\011\209\011\209\011\209\011\209\011\044\255\209\011\209\011\
\209\011\209\011\209\011\209\011\209\011\209\011\209\011\209\011\
\032\000\000\000\000\000\246\000\232\000\229\000\000\000\249\000\
\253\000\050\000\000\000\249\000\052\000\254\255\242\000\000\000\
\008\001\000\000\009\001\010\001\000\000\000\000\128\255\163\017\
\250\000\000\000\037\001\000\000\000\000\026\001\216\254\209\011\
\209\011\028\255\029\001\046\001\000\000\000\000\000\000\206\255\
\000\000\000\000\000\000\128\255\163\017\128\255\163\017\000\000\
\000\000\029\001\161\000\164\007\000\000\000\000\209\011\209\011\
\000\000\209\011\209\011\000\000\000\000\031\016\000\000\000\000\
\000\000\163\017\078\000\031\001\038\001\209\011\141\015\000\000\
\000\000\035\001\218\017\059\014\168\004\168\004\023\009\023\009\
\246\003\246\003\002\000\246\003\246\003\191\017\000\000\000\000\
\000\000\000\000\044\255\044\255\044\255\044\255\003\010\244\017\
\014\018\040\018\168\004\168\004\113\000\113\000\002\000\002\000\
\002\000\000\000\082\000\209\011\161\000\015\000\120\001\253\007\
\222\000\056\001\252\255\161\000\000\000\015\000\000\000\191\255\
\039\001\000\000\043\001\122\001\209\011\123\001\045\001\027\255\
\050\001\049\001\000\000\119\255\000\000\121\001\209\011\044\255\
\136\001\044\255\209\011\095\001\000\000\081\015\171\016\087\000\
\028\255\028\255\042\255\142\001\062\001\114\000\000\000\065\001\
\073\001\064\001\067\001\000\000\000\000\000\000\000\000\069\001\
\079\001\000\000\209\011\000\000\209\011\209\011\245\014\085\001\
\000\000\233\000\233\000\000\000\191\008\044\255\044\255\044\255\
\044\255\044\255\044\255\044\255\044\255\044\255\044\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\209\011\252\255\000\000\000\000\000\000\044\255\209\011\000\000\
\119\000\209\011\174\001\102\255\113\015\114\255\209\011\172\255\
\131\255\000\000\128\255\027\255\209\011\128\255\066\016\122\012\
\000\000\114\013\101\016\000\000\028\255\142\001\000\000\046\001\
\000\000\093\001\028\255\187\255\000\000\209\011\000\000\000\000\
\000\000\114\000\000\000\101\001\000\000\000\000\000\000\000\000\
\000\000\163\017\178\015\095\000\209\011\169\001\000\000\131\001\
\031\014\096\009\085\008\034\000\233\000\233\000\131\001\131\001\
\131\001\163\017\000\000\203\013\136\016\000\000\000\000\098\000\
\109\001\209\011\161\000\128\255\209\011\161\000\215\015\000\000\
\000\000\000\000\163\017\179\001\000\000\044\255\044\255\119\001\
\182\001\148\000\000\000\161\001\120\000\204\016\137\001\209\011\
\000\000\000\000\017\015\209\011\126\001\169\001\194\001\000\000\
\000\000\044\255\148\001\000\000\000\000\107\017\183\001\195\001\
\163\017\152\001\138\001\000\000\070\018\083\018\141\001\158\001\
\028\255\207\001\000\000\000\000\000\000\147\001\237\016\000\000\
\047\017\000\000\000\000\151\001\169\001\096\018\044\255\209\011\
\209\011\128\255\019\255\209\011\217\001\000\000\000\000\000\000\
\000\000\000\000\000\000\209\011\153\001\209\011\209\011\169\001\
\000\000\000\000\116\018\163\017\135\017\000\000\000\000\000\000\
\163\017\209\011\156\001\217\001\218\001\000\000\014\017\114\000\
\163\017\163\017\044\255\209\011\077\017\000\000\000\000\154\001\
\217\001\000\000\000\000\128\018\163\017\128\255\128\255\217\001\
\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\186\010\234\010\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\209\012\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\112\000\074\011\000\000\000\000\086\013\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\132\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\163\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\195\000\000\000\000\000\000\000\000\000\000\000\028\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\012\000\000\180\013\000\000\000\000\000\000\000\000\
\000\000\130\000\000\000\000\000\130\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\181\000\000\000\000\000\000\000\000\000\000\000\000\000\
\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\209\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\027\009\117\001\206\001\039\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\160\001\000\000\000\000\195\013\
\000\000\000\000\000\000\221\013\000\000\252\015\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\137\000\113\012\
\065\012\000\000\130\012\000\000\000\000\000\000\088\010\000\000\
\000\000\000\000\169\012\153\011\000\000\000\000\000\000\169\010\
\000\000\000\000\000\000\137\000\241\012\137\000\017\013\000\000\
\000\000\037\013\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\217\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\205\009\116\009\250\005\083\006\094\007\183\007\
\150\004\239\004\128\002\072\005\161\005\007\010\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\008\
\105\008\016\008\172\006\005\007\228\003\061\004\217\002\050\003\
\139\003\000\000\000\000\000\000\000\000\186\010\000\000\000\000\
\000\000\069\013\234\010\000\000\000\000\186\010\000\000\236\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\217\010\
\009\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\209\000\000\000\000\000\
\000\000\084\007\098\007\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\234\010\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\209\000\000\000\000\000\000\000\000\000\000\000\175\255\
\000\000\000\000\050\255\000\000\000\000\012\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\219\011\
\000\000\000\000\000\000\088\010\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\219\000\000\000\000\000\000\000\219\001\000\000\113\009\
\000\000\241\255\008\000\173\007\187\007\002\008\161\012\192\014\
\056\018\117\013\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\133\255\000\000\000\000\000\000\000\000\
\000\000\000\000\167\001\000\000\000\000\000\000\000\000\054\000\
\235\001\169\010\000\000\000\000\000\000\000\000\057\011\000\000\
\000\000\000\000\000\000\000\000\000\000\105\255\000\000\000\000\
\000\000\000\000\182\255\000\000\000\000\000\000\000\000\041\255\
\184\001\000\000\000\000\000\000\000\000\000\000\000\000\088\010\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\187\001\000\000\000\000\000\000\
\000\000\142\255\000\000\000\000\254\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\105\011\000\000\000\000\190\001\
\000\000\000\000\000\000\005\002\000\000\000\000\000\000\000\000\
\197\001\000\000\000\000\139\255\000\000\000\000\000\000\000\000\
\143\255\048\255\000\000\000\000\000\000\000\000\000\000\000\000\
\205\001\000\000\000\000\000\000\016\002\016\255\051\255\209\001\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\006\000\026\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\172\014\
\005\000\000\000\184\002\114\002\064\002\000\000\146\255\000\000\
\061\002\166\255\000\000\083\000\000\000\190\002\000\000\238\002\
\135\255\000\000\067\255\000\000\039\255\198\002\000\000\235\254\
\201\002\000\000\000\000\014\002\000\000\000\000\242\002\191\002\
\000\000\178\001\227\254\000\000\138\255\000\000\080\001\000\000\
\000\000\024\001\025\001\000\000\004\255\000\000\000\000\070\001\
\071\001\000\000\223\254\252\001\191\254\000\000\000\000\000\000\
\210\001\211\001\000\000\000\000\000\000\000\000\000\000\104\254\
\002\002\000\000"

let yytablesize = 5070
let yytable = "\152\000\
\202\000\155\000\156\000\157\000\158\000\160\000\234\000\039\000\
\153\001\215\001\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\054\000\147\000\149\000\123\001\153\000\066\001\
\001\000\208\000\137\001\136\001\215\000\107\000\105\000\105\000\
\105\000\229\000\105\000\231\000\231\000\102\000\082\001\023\002\
\083\001\129\000\154\001\067\001\015\001\129\000\041\000\016\001\
\068\001\017\001\018\001\103\000\246\000\003\001\106\000\250\000\
\216\000\098\001\099\001\100\001\101\001\138\000\225\000\255\000\
\106\000\105\000\106\000\111\000\106\000\106\000\106\000\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\209\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\123\000\108\000\
\072\001\043\000\105\000\109\000\187\001\024\002\144\001\109\000\
\146\001\148\000\150\000\188\000\154\000\217\000\202\001\021\000\
\056\001\218\000\200\000\109\000\200\000\019\001\020\001\051\000\
\206\000\221\000\021\001\138\000\100\000\070\001\071\001\155\001\
\048\001\022\001\225\000\194\001\106\000\105\000\049\001\043\002\
\050\001\109\000\109\000\075\000\176\001\177\001\178\001\179\001\
\180\001\181\001\182\001\183\001\184\001\185\001\051\001\105\000\
\252\000\105\000\052\001\143\000\053\001\224\000\076\000\224\000\
\124\000\054\001\105\000\095\001\188\001\130\000\055\001\227\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\010\002\
\032\000\247\000\033\000\197\001\140\001\195\001\104\000\088\000\
\141\001\118\001\034\000\218\000\251\001\035\000\036\000\077\000\
\140\001\198\001\157\000\089\000\090\000\037\000\151\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\091\000\248\000\
\204\001\032\000\078\000\033\000\079\000\056\001\088\000\105\000\
\249\000\200\001\133\001\034\000\109\000\140\000\035\000\036\000\
\105\000\224\000\089\000\090\000\143\001\109\000\037\000\172\001\
\147\001\080\000\092\000\126\001\129\000\091\000\251\001\084\001\
\129\000\093\000\094\000\131\000\237\001\238\001\095\000\131\000\
\038\000\228\000\066\001\131\000\067\000\096\000\126\001\127\001\
\170\001\075\001\171\001\250\000\068\000\129\000\232\001\236\000\
\254\001\092\000\101\000\192\001\131\000\237\000\067\001\058\000\
\093\000\094\000\127\001\076\001\128\001\095\000\077\001\129\001\
\059\000\038\000\069\000\200\000\096\000\078\001\186\001\039\002\
\130\000\213\001\240\000\070\000\189\001\019\002\110\000\250\000\
\241\000\114\001\071\000\032\000\199\001\033\000\060\000\212\000\
\124\001\111\000\203\001\039\002\212\000\034\000\003\001\212\000\
\035\000\036\000\061\000\062\000\170\000\063\000\003\001\003\001\
\037\000\174\000\003\001\214\001\022\002\112\000\213\000\212\000\
\003\001\044\002\003\001\213\000\213\000\003\001\213\000\114\000\
\113\000\143\000\219\001\144\000\003\001\003\001\145\000\003\001\
\003\001\003\001\003\001\003\001\102\001\003\001\213\000\003\001\
\003\001\003\001\003\001\003\001\003\001\003\001\115\000\230\001\
\116\000\003\001\233\001\107\001\108\001\109\001\110\001\111\001\
\051\002\052\002\159\001\038\000\183\000\003\001\034\001\190\001\
\115\001\003\001\160\001\003\001\021\000\247\001\003\001\191\001\
\125\001\249\001\041\001\030\000\041\001\003\001\003\001\021\000\
\042\001\031\000\043\001\117\000\003\001\118\000\032\000\146\000\
\033\000\021\000\021\000\021\000\021\000\021\000\119\000\120\000\
\034\000\021\000\021\000\035\000\036\000\021\000\091\001\021\000\
\185\000\030\000\236\000\037\000\092\001\020\002\021\002\073\001\
\112\001\025\002\121\000\170\000\032\000\151\001\033\000\091\001\
\174\000\031\002\091\001\033\002\034\002\218\001\034\000\125\000\
\228\001\035\000\036\000\126\000\182\000\183\000\184\000\037\002\
\021\000\037\000\157\000\157\000\161\000\127\000\128\000\231\001\
\073\001\045\002\234\001\157\000\157\000\184\000\244\001\157\000\
\186\000\157\000\086\000\157\000\157\000\157\000\038\000\157\000\
\086\000\076\001\157\000\105\000\077\001\191\000\193\000\204\000\
\109\000\157\000\157\000\078\001\157\000\157\000\157\000\157\000\
\157\000\214\000\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\209\000\038\000\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\230\000\002\000\057\000\157\000\157\000\
\157\000\157\000\157\000\057\000\157\000\157\000\157\000\157\000\
\157\000\235\000\157\000\157\000\238\000\157\000\239\000\157\000\
\045\000\157\000\157\000\200\000\200\000\242\000\045\000\243\000\
\244\000\124\000\174\000\102\001\200\000\200\000\182\000\124\000\
\200\000\125\000\200\000\126\000\200\000\200\000\200\000\125\000\
\200\000\126\000\253\000\200\000\109\001\110\001\111\001\036\001\
\037\001\038\001\200\000\200\000\039\001\200\000\200\000\200\000\
\200\000\200\000\044\001\200\000\200\000\200\000\200\000\200\000\
\200\000\200\000\200\000\200\000\040\001\063\001\200\000\200\000\
\200\000\200\000\200\000\200\000\200\000\200\000\200\000\200\000\
\200\000\200\000\200\000\200\000\045\001\046\001\047\001\200\000\
\200\000\200\000\200\000\200\000\064\001\200\000\200\000\200\000\
\200\000\200\000\065\001\200\000\200\000\073\001\200\000\093\001\
\200\000\074\001\200\000\200\000\183\000\183\000\094\001\097\001\
\116\001\121\001\132\001\134\001\130\001\183\000\183\000\167\000\
\131\001\183\000\135\001\183\000\138\001\183\000\183\000\183\000\
\139\001\183\000\142\001\145\001\183\000\148\001\156\001\158\001\
\162\001\164\001\166\001\183\000\183\000\167\001\183\000\183\000\
\183\000\183\000\183\000\168\001\183\000\183\000\183\000\183\000\
\183\000\183\000\183\000\183\000\183\000\169\001\174\001\183\000\
\183\000\183\000\183\000\183\000\183\000\183\000\183\000\183\000\
\183\000\183\000\183\000\183\000\193\001\212\001\216\001\220\001\
\183\000\183\000\183\000\183\000\183\000\102\001\183\000\183\000\
\183\000\183\000\183\000\229\001\183\000\183\000\236\001\183\000\
\241\001\183\000\239\001\183\000\183\000\184\000\184\000\243\001\
\250\001\246\001\252\001\255\001\001\002\002\002\184\000\184\000\
\164\000\004\002\184\000\005\002\184\000\066\001\184\000\184\000\
\184\000\008\002\184\000\011\002\012\002\184\000\015\002\026\002\
\032\002\047\002\040\002\220\000\184\000\184\000\038\002\184\000\
\184\000\184\000\184\000\184\000\053\000\184\000\184\000\184\000\
\184\000\184\000\184\000\184\000\184\000\184\000\115\000\232\000\
\184\000\184\000\184\000\184\000\184\000\184\000\184\000\184\000\
\184\000\184\000\184\000\184\000\184\000\220\000\142\000\119\000\
\221\000\184\000\184\000\184\000\184\000\184\000\122\000\184\000\
\184\000\184\000\184\000\184\000\120\000\184\000\184\000\142\000\
\184\000\123\000\184\000\143\000\184\000\184\000\182\000\182\000\
\057\000\205\000\035\001\085\001\087\001\203\000\122\000\182\000\
\182\000\165\000\197\000\182\000\196\000\182\000\120\001\182\000\
\182\000\182\000\129\000\182\000\201\001\233\000\182\000\009\002\
\048\002\049\002\016\002\017\002\152\001\182\000\182\000\000\000\
\182\000\182\000\182\000\182\000\182\000\157\001\182\000\182\000\
\182\000\182\000\182\000\182\000\182\000\182\000\182\000\000\000\
\000\000\182\000\182\000\182\000\182\000\182\000\182\000\182\000\
\182\000\182\000\182\000\182\000\182\000\182\000\000\000\210\001\
\211\001\000\000\182\000\182\000\182\000\182\000\182\000\000\000\
\182\000\182\000\182\000\182\000\182\000\000\000\182\000\182\000\
\000\000\182\000\000\000\182\000\000\000\182\000\182\000\167\000\
\167\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\167\000\167\000\166\000\000\000\167\000\000\000\167\000\000\000\
\167\000\167\000\167\000\000\000\167\000\000\000\000\000\167\000\
\000\000\000\000\000\000\000\000\000\000\000\000\167\000\167\000\
\000\000\167\000\167\000\167\000\167\000\167\000\000\000\167\000\
\167\000\167\000\167\000\167\000\167\000\167\000\167\000\167\000\
\000\000\000\000\167\000\167\000\167\000\167\000\167\000\167\000\
\167\000\167\000\000\000\167\000\167\000\167\000\167\000\000\000\
\000\000\000\000\000\000\167\000\167\000\167\000\167\000\167\000\
\000\000\167\000\167\000\167\000\167\000\167\000\000\000\167\000\
\167\000\000\000\167\000\000\000\167\000\000\000\167\000\167\000\
\164\000\164\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\164\000\164\000\162\000\000\000\164\000\000\000\164\000\
\000\000\164\000\164\000\164\000\000\000\164\000\000\000\000\000\
\164\000\000\000\000\000\000\000\000\000\000\000\000\000\164\000\
\164\000\000\000\164\000\164\000\164\000\164\000\164\000\000\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\000\000\000\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\164\000\000\000\164\000\164\000\164\000\164\000\
\000\000\000\000\000\000\000\000\164\000\164\000\164\000\164\000\
\164\000\000\000\164\000\164\000\164\000\164\000\164\000\000\000\
\164\000\164\000\000\000\164\000\000\000\164\000\000\000\164\000\
\164\000\165\000\165\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\165\000\165\000\163\000\000\000\165\000\000\000\
\165\000\000\000\165\000\165\000\165\000\000\000\165\000\000\000\
\000\000\165\000\000\000\000\000\000\000\000\000\000\000\000\000\
\165\000\165\000\000\000\165\000\165\000\165\000\165\000\165\000\
\000\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
\165\000\165\000\000\000\000\000\165\000\165\000\165\000\165\000\
\165\000\165\000\165\000\165\000\000\000\165\000\165\000\165\000\
\165\000\000\000\000\000\000\000\000\000\165\000\165\000\165\000\
\165\000\165\000\000\000\165\000\165\000\165\000\165\000\165\000\
\000\000\165\000\165\000\000\000\165\000\000\000\165\000\000\000\
\165\000\165\000\166\000\166\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\166\000\166\000\168\000\000\000\166\000\
\000\000\166\000\000\000\166\000\166\000\166\000\000\000\166\000\
\000\000\000\000\166\000\000\000\000\000\000\000\000\000\000\000\
\000\000\166\000\166\000\000\000\166\000\166\000\166\000\166\000\
\166\000\000\000\166\000\166\000\166\000\166\000\166\000\166\000\
\166\000\166\000\166\000\000\000\000\000\166\000\166\000\166\000\
\166\000\166\000\166\000\166\000\166\000\000\000\166\000\166\000\
\166\000\166\000\000\000\000\000\000\000\000\000\166\000\166\000\
\166\000\166\000\166\000\000\000\166\000\166\000\166\000\166\000\
\166\000\000\000\166\000\166\000\000\000\166\000\000\000\166\000\
\000\000\166\000\166\000\162\000\162\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\162\000\162\000\169\000\000\000\
\162\000\000\000\162\000\000\000\162\000\162\000\162\000\000\000\
\162\000\000\000\000\000\162\000\000\000\000\000\000\000\000\000\
\000\000\000\000\162\000\162\000\000\000\162\000\162\000\162\000\
\162\000\162\000\000\000\162\000\162\000\162\000\162\000\162\000\
\162\000\162\000\162\000\162\000\000\000\000\000\162\000\162\000\
\162\000\162\000\162\000\162\000\162\000\162\000\000\000\162\000\
\162\000\162\000\162\000\000\000\000\000\000\000\000\000\162\000\
\162\000\162\000\162\000\162\000\000\000\162\000\162\000\000\000\
\170\000\000\000\000\000\162\000\162\000\174\000\162\000\000\000\
\162\000\000\000\162\000\162\000\163\000\163\000\000\000\180\000\
\181\000\182\000\183\000\184\000\000\000\163\000\163\000\171\000\
\000\000\163\000\000\000\163\000\000\000\163\000\163\000\163\000\
\000\000\163\000\000\000\000\000\163\000\000\000\000\000\000\000\
\000\000\000\000\000\000\163\000\163\000\000\000\163\000\163\000\
\163\000\163\000\163\000\000\000\163\000\163\000\163\000\163\000\
\163\000\163\000\163\000\163\000\163\000\000\000\000\000\163\000\
\163\000\163\000\163\000\163\000\163\000\163\000\163\000\000\000\
\163\000\163\000\163\000\163\000\000\000\000\000\000\000\000\000\
\163\000\163\000\163\000\163\000\163\000\000\000\163\000\163\000\
\000\000\000\000\000\000\000\000\163\000\163\000\000\000\163\000\
\000\000\163\000\000\000\163\000\163\000\168\000\168\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\168\000\168\000\
\170\000\000\000\168\000\000\000\168\000\000\000\168\000\168\000\
\168\000\000\000\168\000\000\000\000\000\168\000\000\000\000\000\
\000\000\000\000\000\000\000\000\168\000\168\000\000\000\168\000\
\168\000\168\000\168\000\168\000\000\000\168\000\168\000\168\000\
\168\000\168\000\168\000\168\000\168\000\168\000\000\000\000\000\
\168\000\168\000\168\000\168\000\168\000\168\000\168\000\168\000\
\000\000\168\000\168\000\168\000\168\000\000\000\000\000\000\000\
\000\000\168\000\168\000\168\000\168\000\168\000\000\000\000\000\
\168\000\169\000\170\000\171\000\172\000\168\000\168\000\174\000\
\168\000\000\000\168\000\000\000\168\000\168\000\169\000\169\000\
\000\000\180\000\181\000\182\000\183\000\184\000\000\000\169\000\
\169\000\174\000\000\000\169\000\000\000\169\000\000\000\169\000\
\169\000\169\000\000\000\169\000\000\000\000\000\169\000\000\000\
\000\000\000\000\000\000\000\000\000\000\169\000\169\000\000\000\
\169\000\169\000\169\000\169\000\169\000\000\000\169\000\169\000\
\169\000\169\000\169\000\169\000\169\000\169\000\169\000\000\000\
\000\000\169\000\169\000\169\000\169\000\169\000\169\000\169\000\
\169\000\000\000\169\000\169\000\169\000\169\000\000\000\000\000\
\000\000\000\000\169\000\169\000\169\000\169\000\169\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\169\000\169\000\
\000\000\169\000\000\000\169\000\000\000\169\000\169\000\171\000\
\171\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\171\000\171\000\175\000\000\000\171\000\000\000\171\000\000\000\
\171\000\171\000\171\000\000\000\171\000\000\000\000\000\171\000\
\000\000\000\000\000\000\000\000\000\000\000\000\171\000\171\000\
\000\000\171\000\171\000\171\000\171\000\171\000\000\000\171\000\
\171\000\171\000\171\000\171\000\171\000\171\000\171\000\171\000\
\000\000\000\000\171\000\171\000\171\000\171\000\171\000\171\000\
\171\000\171\000\000\000\171\000\171\000\171\000\171\000\000\000\
\000\000\000\000\000\000\171\000\171\000\171\000\171\000\171\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\171\000\
\171\000\000\000\171\000\000\000\171\000\000\000\171\000\171\000\
\170\000\170\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\170\000\170\000\173\000\000\000\170\000\000\000\170\000\
\000\000\170\000\170\000\170\000\000\000\170\000\000\000\000\000\
\170\000\000\000\000\000\000\000\000\000\000\000\000\000\170\000\
\170\000\000\000\170\000\170\000\170\000\170\000\170\000\000\000\
\170\000\170\000\170\000\170\000\170\000\170\000\170\000\170\000\
\170\000\000\000\000\000\170\000\170\000\170\000\170\000\170\000\
\170\000\170\000\170\000\000\000\170\000\170\000\170\000\170\000\
\000\000\000\000\000\000\000\000\170\000\170\000\170\000\170\000\
\170\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\170\000\170\000\000\000\170\000\000\000\170\000\000\000\170\000\
\170\000\174\000\174\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\174\000\174\000\172\000\000\000\174\000\000\000\
\174\000\000\000\174\000\174\000\174\000\000\000\174\000\000\000\
\000\000\174\000\000\000\000\000\000\000\000\000\000\000\000\000\
\174\000\174\000\000\000\174\000\174\000\174\000\174\000\174\000\
\000\000\174\000\174\000\174\000\174\000\174\000\174\000\174\000\
\174\000\174\000\000\000\000\000\174\000\174\000\174\000\174\000\
\174\000\174\000\000\000\000\000\000\000\000\000\000\000\174\000\
\174\000\000\000\000\000\000\000\000\000\174\000\174\000\174\000\
\174\000\174\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\174\000\174\000\000\000\174\000\000\000\174\000\000\000\
\174\000\174\000\175\000\175\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\175\000\175\000\176\000\000\000\175\000\
\000\000\175\000\000\000\175\000\175\000\175\000\000\000\175\000\
\000\000\000\000\175\000\000\000\000\000\000\000\000\000\000\000\
\000\000\175\000\175\000\000\000\175\000\175\000\175\000\175\000\
\175\000\000\000\175\000\175\000\175\000\175\000\175\000\175\000\
\175\000\175\000\175\000\000\000\000\000\175\000\175\000\175\000\
\175\000\175\000\175\000\000\000\000\000\000\000\000\000\000\000\
\175\000\175\000\000\000\000\000\000\000\000\000\175\000\175\000\
\175\000\175\000\175\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\175\000\175\000\000\000\175\000\000\000\175\000\
\000\000\175\000\175\000\173\000\173\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\173\000\173\000\177\000\000\000\
\173\000\000\000\173\000\000\000\173\000\173\000\173\000\000\000\
\173\000\000\000\000\000\173\000\000\000\000\000\000\000\000\000\
\000\000\000\000\173\000\173\000\000\000\173\000\173\000\173\000\
\173\000\173\000\000\000\173\000\173\000\173\000\173\000\173\000\
\173\000\173\000\173\000\173\000\000\000\000\000\173\000\173\000\
\173\000\173\000\173\000\173\000\000\000\000\000\000\000\000\000\
\000\000\173\000\173\000\000\000\000\000\000\000\000\000\173\000\
\173\000\173\000\173\000\173\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\173\000\173\000\000\000\173\000\000\000\
\173\000\000\000\173\000\173\000\172\000\172\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\172\000\172\000\178\000\
\000\000\172\000\000\000\172\000\000\000\172\000\172\000\172\000\
\000\000\172\000\000\000\000\000\172\000\000\000\000\000\000\000\
\000\000\000\000\000\000\172\000\172\000\000\000\172\000\172\000\
\172\000\172\000\172\000\000\000\172\000\172\000\172\000\172\000\
\172\000\172\000\172\000\172\000\172\000\000\000\000\000\172\000\
\172\000\172\000\172\000\172\000\172\000\000\000\000\000\000\000\
\000\000\000\000\172\000\172\000\000\000\000\000\000\000\000\000\
\172\000\172\000\172\000\172\000\172\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\172\000\172\000\000\000\172\000\
\000\000\172\000\000\000\172\000\172\000\176\000\176\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\176\000\176\000\
\179\000\000\000\176\000\000\000\176\000\000\000\176\000\176\000\
\176\000\000\000\176\000\000\000\000\000\176\000\000\000\000\000\
\000\000\000\000\000\000\000\000\176\000\176\000\000\000\176\000\
\176\000\176\000\176\000\176\000\000\000\176\000\176\000\176\000\
\176\000\176\000\176\000\176\000\176\000\176\000\000\000\000\000\
\176\000\176\000\203\000\000\000\176\000\176\000\000\000\203\000\
\203\000\203\000\203\000\176\000\176\000\203\000\203\000\000\000\
\202\000\176\000\176\000\176\000\130\000\202\000\202\000\202\000\
\202\000\000\000\203\000\202\000\202\000\176\000\176\000\032\000\
\176\000\033\000\176\000\000\000\176\000\176\000\177\000\177\000\
\202\000\034\000\000\000\000\000\035\000\036\000\000\000\177\000\
\177\000\180\000\000\000\177\000\037\000\177\000\000\000\177\000\
\177\000\177\000\000\000\177\000\000\000\000\000\177\000\000\000\
\000\000\000\000\000\000\000\000\000\000\177\000\177\000\000\000\
\177\000\177\000\177\000\177\000\177\000\000\000\177\000\177\000\
\177\000\177\000\177\000\177\000\177\000\177\000\177\000\000\000\
\000\000\177\000\177\000\211\000\000\000\177\000\177\000\000\000\
\211\000\211\000\211\000\211\000\177\000\177\000\000\000\038\000\
\000\000\205\000\177\000\177\000\177\000\117\001\205\000\205\000\
\205\000\205\000\000\000\211\000\205\000\205\000\177\000\177\000\
\032\000\177\000\033\000\177\000\000\000\177\000\177\000\178\000\
\178\000\205\000\034\000\000\000\000\000\035\000\036\000\000\000\
\178\000\178\000\181\000\000\000\178\000\037\000\178\000\000\000\
\178\000\178\000\178\000\000\000\178\000\000\000\000\000\178\000\
\000\000\000\000\000\000\000\000\000\000\000\000\178\000\178\000\
\000\000\178\000\178\000\178\000\178\000\178\000\000\000\178\000\
\178\000\178\000\178\000\178\000\178\000\178\000\178\000\178\000\
\206\000\000\000\178\000\178\000\000\000\206\000\206\000\206\000\
\206\000\000\000\000\000\206\000\206\000\178\000\178\000\000\000\
\038\000\000\000\000\000\178\000\178\000\178\000\000\000\000\000\
\206\000\000\000\000\000\000\000\000\000\000\000\000\000\178\000\
\178\000\000\000\178\000\000\000\178\000\000\000\178\000\178\000\
\179\000\179\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\179\000\179\000\185\000\000\000\179\000\000\000\179\000\
\000\000\179\000\179\000\179\000\000\000\179\000\000\000\000\000\
\179\000\000\000\000\000\000\000\000\000\000\000\000\000\179\000\
\179\000\000\000\179\000\179\000\179\000\179\000\179\000\102\001\
\179\000\179\000\179\000\179\000\179\000\179\000\179\000\179\000\
\179\000\003\000\106\001\179\000\179\000\000\000\107\001\108\001\
\109\001\110\001\111\001\000\000\004\000\000\000\179\000\179\000\
\000\000\000\000\000\000\000\000\179\000\179\000\005\000\006\000\
\007\000\008\000\009\000\000\000\000\000\000\000\010\000\011\000\
\179\000\179\000\012\000\179\000\013\000\179\000\000\000\179\000\
\179\000\180\000\180\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\180\000\180\000\186\000\000\000\180\000\000\000\
\180\000\000\000\180\000\180\000\180\000\000\000\180\000\000\000\
\000\000\180\000\000\000\000\000\000\000\000\000\000\000\000\000\
\180\000\180\000\000\000\180\000\180\000\180\000\180\000\180\000\
\000\000\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
\180\000\180\000\000\000\000\000\180\000\180\000\000\000\000\000\
\000\000\102\001\000\000\000\000\000\000\000\000\000\000\180\000\
\180\000\000\000\104\001\105\001\106\001\180\000\156\000\000\000\
\107\001\108\001\109\001\110\001\111\001\000\000\000\000\000\000\
\000\000\180\000\180\000\000\000\180\000\175\001\180\000\000\000\
\180\000\180\000\181\000\181\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\181\000\181\000\000\000\000\000\181\000\
\000\000\181\000\000\000\181\000\181\000\181\000\000\000\181\000\
\000\000\000\000\181\000\000\000\000\000\000\000\000\000\000\000\
\000\000\181\000\181\000\000\000\181\000\181\000\181\000\181\000\
\181\000\000\000\181\000\181\000\181\000\181\000\181\000\181\000\
\181\000\181\000\181\000\164\000\165\000\181\000\181\000\168\000\
\169\000\170\000\171\000\172\000\000\000\000\000\174\000\127\000\
\181\000\181\000\000\000\000\000\000\000\178\000\179\000\000\000\
\180\000\181\000\182\000\183\000\184\000\000\000\000\000\000\000\
\000\000\000\000\181\000\181\000\000\000\181\000\000\000\181\000\
\000\000\181\000\181\000\185\000\185\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\185\000\185\000\000\000\000\000\
\185\000\000\000\185\000\000\000\185\000\185\000\185\000\000\000\
\185\000\000\000\000\000\185\000\000\000\000\000\000\000\000\000\
\000\000\000\000\185\000\185\000\056\000\185\000\185\000\185\000\
\185\000\185\000\102\001\185\000\185\000\185\000\185\000\185\000\
\185\000\185\000\185\000\185\000\105\001\106\001\185\000\185\000\
\242\000\107\001\108\001\109\001\110\001\111\001\000\000\210\000\
\000\000\185\000\185\000\000\000\210\000\210\000\210\000\210\000\
\000\000\058\000\210\000\210\000\210\000\210\000\210\000\000\000\
\000\000\000\000\000\000\185\000\185\000\000\000\185\000\210\000\
\185\000\000\000\185\000\185\000\186\000\186\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\186\000\186\000\000\000\
\249\000\186\000\000\000\186\000\000\000\186\000\186\000\186\000\
\000\000\186\000\000\000\000\000\186\000\000\000\000\000\000\000\
\000\000\092\000\000\000\186\000\186\000\000\000\186\000\186\000\
\186\000\186\000\186\000\000\000\186\000\186\000\186\000\186\000\
\186\000\186\000\186\000\186\000\186\000\000\000\000\000\186\000\
\000\000\000\000\000\000\000\000\000\000\000\000\156\000\156\000\
\251\000\000\000\186\000\186\000\000\000\000\000\000\000\156\000\
\156\000\000\000\000\000\156\000\000\000\156\000\000\000\156\000\
\156\000\156\000\000\000\156\000\186\000\186\000\156\000\186\000\
\000\000\186\000\000\000\186\000\186\000\156\000\156\000\000\000\
\156\000\156\000\156\000\156\000\156\000\000\000\156\000\156\000\
\156\000\156\000\156\000\156\000\156\000\156\000\156\000\000\000\
\250\000\000\000\000\000\000\000\000\000\102\001\000\000\000\000\
\000\000\103\001\000\000\000\000\156\000\156\000\104\001\105\001\
\106\001\018\000\000\000\000\000\107\001\108\001\109\001\110\001\
\111\001\000\000\000\000\000\000\000\000\000\000\156\000\156\000\
\127\000\156\000\000\000\156\000\000\000\156\000\156\000\000\000\
\127\000\127\000\000\000\000\000\127\000\000\000\000\000\000\000\
\252\000\000\000\127\000\000\000\127\000\000\000\000\000\127\000\
\000\000\000\000\000\000\000\000\000\000\000\000\127\000\127\000\
\000\000\127\000\127\000\127\000\127\000\127\000\000\000\127\000\
\000\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
\000\000\000\000\000\000\127\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\226\000\000\000\000\000\127\000\000\000\127\000\000\000\000\000\
\127\000\003\000\000\000\000\000\000\000\000\000\000\000\127\000\
\127\000\242\000\000\000\000\000\004\000\000\000\127\000\000\000\
\000\000\242\000\242\000\000\000\000\000\242\000\005\000\006\000\
\007\000\008\000\009\000\242\000\000\000\242\000\010\000\011\000\
\242\000\000\000\012\000\000\000\013\000\000\000\058\000\242\000\
\242\000\000\000\242\000\242\000\242\000\242\000\242\000\000\000\
\242\000\058\000\242\000\242\000\242\000\242\000\242\000\242\000\
\242\000\249\000\227\000\058\000\058\000\058\000\058\000\058\000\
\000\000\249\000\249\000\058\000\058\000\249\000\000\000\058\000\
\000\000\058\000\000\000\249\000\242\000\249\000\000\000\000\000\
\249\000\000\000\000\000\000\000\000\000\000\000\092\000\249\000\
\249\000\242\000\249\000\249\000\249\000\249\000\249\000\242\000\
\249\000\092\000\249\000\249\000\249\000\249\000\249\000\249\000\
\249\000\251\000\047\000\092\000\092\000\092\000\092\000\092\000\
\000\000\251\000\251\000\092\000\092\000\251\000\000\000\092\000\
\000\000\092\000\000\000\251\000\249\000\251\000\000\000\000\000\
\251\000\000\000\000\000\000\000\000\000\000\000\000\000\251\000\
\251\000\249\000\251\000\251\000\251\000\251\000\251\000\249\000\
\251\000\000\000\251\000\251\000\251\000\251\000\251\000\251\000\
\251\000\250\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\000\250\000\250\000\000\000\000\000\250\000\000\000\000\000\
\000\000\000\000\000\000\250\000\251\000\250\000\000\000\000\000\
\250\000\000\000\000\000\000\000\000\000\000\000\018\000\250\000\
\250\000\251\000\250\000\250\000\250\000\250\000\250\000\251\000\
\250\000\018\000\250\000\250\000\250\000\250\000\250\000\250\000\
\250\000\252\000\000\000\018\000\018\000\018\000\018\000\018\000\
\067\000\252\000\252\000\018\000\018\000\252\000\000\000\018\000\
\000\000\018\000\000\000\252\000\250\000\252\000\000\000\000\000\
\252\000\069\000\000\000\000\000\000\000\000\000\000\000\252\000\
\252\000\250\000\252\000\252\000\252\000\252\000\252\000\250\000\
\252\000\000\000\252\000\252\000\252\000\252\000\252\000\252\000\
\252\000\226\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\226\000\226\000\000\000\000\000\226\000\000\000\000\000\
\065\000\000\000\000\000\000\000\252\000\000\000\000\000\000\000\
\226\000\000\000\000\000\000\000\000\000\000\000\000\000\226\000\
\226\000\252\000\226\000\226\000\226\000\226\000\226\000\252\000\
\226\000\000\000\226\000\226\000\226\000\226\000\226\000\226\000\
\226\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\081\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\
\000\000\000\000\000\000\227\000\000\000\000\000\000\000\000\000\
\088\000\000\000\000\000\227\000\227\000\000\000\000\000\227\000\
\000\000\226\000\000\000\000\000\089\000\090\000\000\000\226\000\
\096\000\000\000\227\000\000\000\000\000\000\000\000\000\091\000\
\000\000\227\000\227\000\000\000\227\000\227\000\227\000\227\000\
\227\000\000\000\227\000\000\000\227\000\227\000\227\000\227\000\
\227\000\227\000\227\000\047\000\000\000\000\000\000\000\000\000\
\104\000\000\000\000\000\092\000\047\000\000\000\000\000\047\000\
\000\000\000\000\093\000\094\000\000\000\000\000\000\000\095\000\
\000\000\000\000\047\000\000\000\101\000\000\000\096\000\000\000\
\000\000\000\000\047\000\227\000\047\000\047\000\047\000\047\000\
\047\000\227\000\000\000\000\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\071\000\000\000\000\000\075\000\000\000\000\000\000\000\
\000\000\047\000\071\000\000\000\000\000\071\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\000\000\000\000\
\071\000\000\000\000\000\047\000\000\000\000\000\000\000\047\000\
\071\000\047\000\071\000\071\000\071\000\071\000\071\000\000\000\
\000\000\000\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\067\000\000\000\000\000\076\000\000\000\000\000\000\000\
\000\000\000\000\067\000\000\000\000\000\067\000\000\000\000\000\
\071\000\000\000\069\000\059\000\000\000\000\000\000\000\000\000\
\067\000\000\000\000\000\069\000\000\000\000\000\069\000\000\000\
\067\000\000\000\067\000\067\000\067\000\067\000\067\000\000\000\
\000\000\069\000\067\000\067\000\067\000\067\000\067\000\067\000\
\067\000\069\000\093\000\069\000\069\000\069\000\069\000\069\000\
\000\000\065\000\000\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\065\000\027\000\102\001\065\000\000\000\000\000\
\206\001\000\000\000\000\000\000\000\000\104\001\105\001\106\001\
\065\000\000\000\074\000\107\001\108\001\109\001\110\001\111\001\
\065\000\000\000\065\000\065\000\065\000\065\000\065\000\000\000\
\000\000\081\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\081\000\000\000\000\000\078\000\081\000\000\000\207\000\
\000\000\000\000\000\000\000\000\207\000\207\000\207\000\207\000\
\081\000\000\000\207\000\207\000\207\000\207\000\207\000\081\000\
\000\000\096\000\081\000\081\000\081\000\081\000\081\000\207\000\
\081\000\096\000\081\000\081\000\000\000\096\000\081\000\081\000\
\081\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\096\000\000\000\000\000\000\000\000\000\000\000\000\000\096\000\
\000\000\104\000\096\000\096\000\096\000\096\000\096\000\000\000\
\096\000\104\000\096\000\096\000\000\000\104\000\096\000\096\000\
\096\000\000\000\000\000\000\000\000\000\101\000\000\000\000\000\
\104\000\000\000\000\000\000\000\000\000\101\000\000\000\104\000\
\000\000\101\000\104\000\104\000\104\000\104\000\104\000\000\000\
\104\000\000\000\104\000\104\000\101\000\000\000\104\000\104\000\
\104\000\000\000\000\000\101\000\000\000\075\000\101\000\101\000\
\101\000\101\000\101\000\000\000\101\000\075\000\101\000\101\000\
\000\000\075\000\101\000\101\000\101\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\000\000\000\000\000\000\000\
\000\000\000\000\032\000\075\000\000\000\000\000\075\000\075\000\
\075\000\075\000\075\000\000\000\075\000\032\000\075\000\075\000\
\000\000\000\000\075\000\075\000\075\000\076\000\000\000\032\000\
\032\000\032\000\032\000\032\000\000\000\076\000\000\000\032\000\
\032\000\076\000\000\000\032\000\000\000\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\076\000\000\000\000\000\000\000\
\059\000\000\000\000\000\076\000\000\000\000\000\076\000\076\000\
\076\000\076\000\076\000\059\000\076\000\000\000\076\000\076\000\
\000\000\000\000\076\000\076\000\076\000\059\000\059\000\059\000\
\059\000\059\000\000\000\000\000\102\001\059\000\059\000\093\000\
\207\001\059\000\000\000\059\000\000\000\104\001\105\001\106\001\
\000\000\000\000\093\000\107\001\108\001\109\001\110\001\111\001\
\027\000\000\000\000\000\000\000\093\000\093\000\093\000\093\000\
\093\000\000\000\000\000\027\000\093\000\093\000\000\000\074\000\
\093\000\097\000\093\000\000\000\000\000\027\000\027\000\027\000\
\027\000\027\000\074\000\000\000\000\000\027\000\027\000\000\000\
\000\000\027\000\000\000\027\000\074\000\074\000\074\000\074\000\
\074\000\078\000\000\000\000\000\074\000\074\000\000\000\000\000\
\074\000\000\001\074\000\000\000\078\000\000\000\000\000\136\000\
\000\000\140\000\141\000\142\000\000\000\000\000\078\000\078\000\
\078\000\078\000\078\000\000\000\000\000\102\001\078\000\078\000\
\000\000\226\001\078\000\000\000\078\000\000\000\104\001\105\001\
\106\001\187\000\000\000\189\000\107\001\108\001\109\001\110\001\
\111\001\199\000\000\000\199\000\000\000\000\000\000\000\000\000\
\000\000\212\000\213\000\000\000\162\000\163\000\164\000\165\000\
\166\000\167\000\168\000\169\000\170\000\171\000\172\000\173\000\
\000\000\174\000\000\000\000\000\000\000\175\000\176\000\177\000\
\178\000\179\000\000\000\180\000\181\000\182\000\183\000\184\000\
\159\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\
\001\001\000\000\000\000\000\000\002\001\000\000\000\000\000\000\
\088\000\245\000\081\000\082\000\083\000\084\000\085\000\086\000\
\087\000\102\001\000\000\000\000\089\000\090\000\000\000\000\000\
\000\000\088\000\104\001\105\001\106\001\225\001\000\000\091\000\
\107\001\108\001\109\001\110\001\111\001\089\000\090\000\164\000\
\165\000\166\000\167\000\168\000\169\000\170\000\171\000\172\000\
\091\000\000\000\174\000\000\000\000\000\000\000\175\000\176\000\
\177\000\178\000\179\000\092\000\180\000\181\000\182\000\183\000\
\184\000\000\000\093\000\094\000\000\000\000\000\000\000\095\000\
\000\000\000\000\000\000\000\000\092\000\000\000\096\000\000\000\
\000\000\000\000\086\001\093\000\094\000\088\001\089\001\000\000\
\095\000\000\000\000\000\000\000\000\000\000\000\000\000\096\000\
\198\000\082\000\083\000\084\000\085\000\086\000\087\000\000\000\
\000\000\000\000\000\000\032\000\000\000\033\000\000\000\088\000\
\000\000\000\000\000\000\000\000\000\000\034\000\000\000\000\000\
\035\000\036\000\000\000\089\000\090\000\000\000\000\000\000\000\
\037\000\000\000\000\000\000\000\000\000\000\000\091\000\113\001\
\000\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\088\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\092\000\000\000\089\000\090\000\000\000\000\000\
\000\000\093\000\094\000\000\000\000\000\000\000\095\000\091\000\
\000\000\000\000\000\000\038\000\000\000\096\000\208\000\000\000\
\000\000\000\000\000\000\208\000\208\000\208\000\208\000\173\001\
\000\000\208\000\208\000\208\000\208\000\208\000\000\000\000\000\
\000\000\000\000\000\000\092\000\000\000\000\000\208\000\000\000\
\000\000\000\000\093\000\094\000\000\000\000\000\000\000\095\000\
\000\000\000\000\207\000\000\000\000\000\248\001\096\000\162\000\
\163\000\164\000\165\000\166\000\167\000\168\000\169\000\170\000\
\171\000\172\000\173\000\000\000\174\000\000\000\000\000\000\000\
\175\000\176\000\177\000\178\000\179\000\000\000\180\000\181\000\
\182\000\183\000\184\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\171\000\172\000\173\000\000\000\
\174\000\000\000\000\000\000\000\175\000\176\000\177\000\178\000\
\179\000\254\000\180\000\181\000\182\000\183\000\184\000\000\000\
\000\000\000\000\000\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\171\000\172\000\173\000\000\000\
\174\000\000\000\000\000\000\000\175\000\176\000\177\000\178\000\
\179\000\149\001\180\000\181\000\182\000\183\000\184\000\000\000\
\000\000\000\000\000\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\171\000\172\000\173\000\000\000\
\174\000\000\000\000\000\000\000\175\000\176\000\177\000\178\000\
\179\000\196\001\180\000\181\000\182\000\183\000\184\000\000\000\
\000\000\000\000\000\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\171\000\172\000\173\000\000\000\
\174\000\000\000\000\000\000\000\175\000\176\000\177\000\178\000\
\179\000\000\000\180\000\181\000\182\000\183\000\184\000\162\000\
\163\000\164\000\165\000\166\000\167\000\168\000\169\000\170\000\
\171\000\172\000\173\000\000\000\174\000\000\000\000\000\000\000\
\175\000\176\000\177\000\178\000\179\000\000\000\180\000\181\000\
\182\000\183\000\184\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\096\001\162\000\163\000\164\000\165\000\
\166\000\167\000\168\000\169\000\170\000\171\000\172\000\173\000\
\000\000\174\000\000\000\000\000\000\000\175\000\176\000\177\000\
\178\000\179\000\000\000\180\000\181\000\182\000\183\000\184\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\217\001\162\000\163\000\164\000\165\000\166\000\167\000\168\000\
\169\000\170\000\171\000\172\000\173\000\000\000\174\000\000\000\
\000\000\000\000\175\000\176\000\177\000\178\000\179\000\000\000\
\180\000\181\000\182\000\183\000\184\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\235\001\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\000\000\157\000\000\000\000\000\000\000\157\000\
\157\000\157\000\157\000\157\000\000\000\157\000\157\000\157\000\
\157\000\157\000\000\000\000\000\157\000\000\000\000\000\000\000\
\057\000\162\000\163\000\164\000\165\000\166\000\167\000\168\000\
\169\000\170\000\171\000\172\000\173\000\000\000\174\000\000\000\
\000\000\000\000\175\000\176\000\177\000\178\000\179\000\000\000\
\180\000\181\000\182\000\183\000\184\000\000\000\000\000\000\000\
\000\000\000\000\000\000\090\001\162\000\163\000\164\000\165\000\
\166\000\167\000\168\000\169\000\170\000\171\000\172\000\173\000\
\000\000\174\000\000\000\000\000\000\000\175\000\176\000\177\000\
\178\000\179\000\000\000\180\000\181\000\182\000\183\000\184\000\
\000\000\000\000\000\000\000\000\000\000\000\000\205\001\162\000\
\163\000\164\000\165\000\166\000\167\000\168\000\169\000\170\000\
\171\000\172\000\173\000\000\000\174\000\000\000\000\000\000\000\
\175\000\176\000\177\000\178\000\179\000\000\000\180\000\181\000\
\182\000\183\000\184\000\000\000\000\000\000\000\000\000\000\000\
\000\000\208\001\162\000\163\000\164\000\165\000\166\000\167\000\
\168\000\169\000\170\000\171\000\172\000\173\000\000\000\174\000\
\000\000\000\000\000\000\175\000\176\000\177\000\178\000\179\000\
\000\000\180\000\181\000\182\000\183\000\184\000\000\000\000\000\
\000\000\000\000\000\000\000\000\227\001\162\000\163\000\164\000\
\165\000\166\000\167\000\168\000\169\000\170\000\171\000\172\000\
\173\000\000\000\174\000\000\000\000\000\000\000\175\000\176\000\
\177\000\178\000\179\000\000\000\180\000\181\000\182\000\183\000\
\184\000\000\000\000\000\000\000\000\000\150\001\162\000\163\000\
\164\000\165\000\166\000\167\000\168\000\169\000\170\000\171\000\
\172\000\173\000\000\000\174\000\000\000\000\000\000\000\175\000\
\176\000\177\000\178\000\179\000\000\000\180\000\181\000\182\000\
\183\000\184\000\000\000\000\000\000\000\000\000\245\001\162\000\
\163\000\164\000\165\000\166\000\167\000\168\000\169\000\170\000\
\171\000\172\000\173\000\000\000\174\000\000\000\000\000\000\000\
\175\000\176\000\177\000\178\000\179\000\000\000\180\000\181\000\
\182\000\183\000\184\000\000\000\000\000\000\000\000\000\013\002\
\162\000\163\000\164\000\165\000\166\000\167\000\168\000\169\000\
\170\000\171\000\172\000\173\000\000\000\174\000\000\000\000\000\
\000\000\175\000\176\000\177\000\178\000\179\000\000\000\180\000\
\181\000\182\000\183\000\184\000\000\000\000\000\000\000\000\000\
\042\002\162\000\163\000\164\000\165\000\166\000\167\000\168\000\
\169\000\170\000\171\000\172\000\173\000\000\000\174\000\000\000\
\000\000\000\000\175\000\176\000\177\000\178\000\179\000\000\000\
\180\000\181\000\182\000\183\000\184\000\000\000\014\002\162\000\
\163\000\164\000\165\000\166\000\167\000\168\000\169\000\170\000\
\171\000\172\000\173\000\000\000\174\000\000\000\000\000\000\000\
\175\000\176\000\177\000\178\000\179\000\000\000\180\000\181\000\
\182\000\183\000\184\000\000\000\046\002\162\000\163\000\164\000\
\165\000\166\000\167\000\168\000\169\000\170\000\171\000\172\000\
\173\000\000\002\174\000\000\000\000\000\000\000\175\000\176\000\
\177\000\178\000\179\000\000\000\180\000\181\000\182\000\183\000\
\184\000\162\000\163\000\164\000\165\000\166\000\167\000\168\000\
\169\000\170\000\171\000\172\000\173\000\036\002\174\000\000\000\
\000\000\000\000\175\000\176\000\177\000\178\000\179\000\000\000\
\180\000\181\000\182\000\183\000\184\000\162\000\163\000\164\000\
\165\000\166\000\167\000\168\000\169\000\170\000\171\000\172\000\
\173\000\000\000\174\000\000\000\000\000\000\000\175\000\176\000\
\177\000\178\000\179\000\000\000\180\000\181\000\182\000\183\000\
\184\000\162\000\163\000\164\000\165\000\166\000\167\000\168\000\
\169\000\170\000\171\000\172\000\000\000\000\000\174\000\000\000\
\000\000\000\000\175\000\176\000\177\000\178\000\179\000\000\000\
\180\000\181\000\182\000\183\000\184\000\163\000\164\000\165\000\
\166\000\167\000\168\000\169\000\170\000\171\000\172\000\000\000\
\000\000\174\000\000\000\000\000\000\000\175\000\176\000\177\000\
\178\000\179\000\000\000\180\000\181\000\182\000\183\000\184\000\
\164\000\165\000\166\000\167\000\168\000\169\000\170\000\171\000\
\172\000\000\000\000\000\174\000\000\000\000\000\000\000\000\000\
\176\000\177\000\178\000\179\000\000\000\180\000\181\000\182\000\
\183\000\184\000\164\000\165\000\166\000\167\000\168\000\169\000\
\170\000\171\000\172\000\000\000\000\000\174\000\000\000\000\000\
\000\000\000\000\000\000\177\000\178\000\179\000\000\000\180\000\
\181\000\182\000\183\000\184\000\164\000\165\000\166\000\167\000\
\168\000\169\000\170\000\171\000\172\000\000\000\000\000\174\000\
\000\000\000\000\000\000\000\000\000\000\000\000\178\000\179\000\
\000\000\180\000\181\000\182\000\183\000\184\000\209\000\000\000\
\000\000\000\000\000\000\209\000\209\000\209\000\209\000\000\000\
\102\001\209\000\209\000\209\000\209\000\209\000\000\000\000\000\
\000\000\104\001\105\001\106\001\006\002\102\001\209\000\107\001\
\108\001\109\001\110\001\111\001\000\000\000\000\104\001\105\001\
\106\001\007\002\102\001\000\000\107\001\108\001\109\001\110\001\
\111\001\000\000\000\000\104\001\105\001\106\001\018\002\000\000\
\000\000\107\001\108\001\109\001\110\001\111\001\102\001\000\000\
\000\000\000\000\035\002\000\000\000\000\000\000\000\000\104\001\
\105\001\106\001\102\001\000\000\000\000\107\001\108\001\109\001\
\110\001\111\001\000\000\104\001\105\001\106\001\050\002\000\000\
\000\000\107\001\108\001\109\001\110\001\111\001"

let yycheck = "\090\000\
\111\000\092\000\093\000\094\000\095\000\096\000\128\000\003\000\
\074\001\162\001\005\000\006\000\007\000\008\000\009\000\010\000\
\011\000\012\000\013\000\000\001\000\001\043\001\000\001\064\001\
\001\000\116\000\056\001\001\001\001\001\000\001\015\001\020\001\
\017\001\124\000\066\001\126\000\127\000\066\001\228\000\021\001\
\230\000\062\001\001\001\084\001\001\001\066\001\001\001\004\001\
\089\001\006\001\007\001\080\001\143\000\000\000\086\001\146\000\
\029\001\019\001\020\001\021\001\022\001\021\001\015\001\154\000\
\015\001\015\001\017\001\088\001\019\001\020\001\021\001\162\000\
\163\000\164\000\165\000\166\000\167\000\168\000\169\000\170\000\
\171\000\172\000\173\000\149\001\175\000\176\000\177\000\178\000\
\179\000\180\000\181\000\182\000\183\000\184\000\000\001\066\001\
\218\000\001\001\083\001\088\001\122\001\083\001\064\001\088\001\
\066\001\086\001\086\001\103\000\086\001\082\001\140\001\000\000\
\086\001\086\001\110\000\086\001\112\000\074\001\075\001\114\000\
\115\000\017\001\079\001\083\001\007\001\216\000\217\000\086\001\
\001\001\086\001\083\001\030\001\083\001\083\001\007\001\032\002\
\009\001\088\001\088\001\086\001\102\001\103\001\104\001\105\001\
\106\001\107\001\108\001\109\001\110\001\111\001\023\001\019\001\
\148\000\021\001\027\001\017\001\029\001\015\001\086\001\017\001\
\066\001\034\001\021\001\254\000\126\001\001\001\039\001\000\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\241\001\
\012\001\001\001\014\001\066\001\062\001\080\001\084\001\016\001\
\066\001\040\001\022\001\083\001\222\001\025\001\026\001\086\001\
\062\001\080\001\000\000\028\001\029\001\033\001\000\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\039\001\031\001\
\142\001\012\001\086\001\014\001\086\001\086\001\016\001\083\001\
\040\001\087\001\053\001\022\001\088\001\083\001\025\001\026\001\
\083\001\083\001\028\001\029\001\063\001\088\001\033\001\094\001\
\067\001\086\001\067\001\064\001\062\001\039\001\016\002\235\000\
\066\001\074\001\075\001\062\001\206\001\207\001\079\001\066\001\
\084\001\082\001\064\001\087\001\001\001\086\001\064\001\084\001\
\091\001\052\001\093\001\094\001\009\001\087\001\196\001\081\001\
\226\001\067\001\081\001\130\001\087\001\087\001\084\001\001\001\
\074\001\075\001\084\001\070\001\086\001\079\001\073\001\089\001\
\010\001\084\001\031\001\000\000\086\001\080\001\121\001\028\002\
\001\001\155\001\081\001\040\001\127\001\255\001\084\001\130\001\
\087\001\037\001\047\001\012\001\135\001\014\001\032\001\063\001\
\044\001\066\001\141\001\048\002\068\001\022\001\001\001\071\001\
\025\001\026\001\044\001\045\001\059\001\047\001\009\001\010\001\
\033\001\064\001\013\001\158\001\002\002\084\001\063\001\087\001\
\019\001\035\002\021\001\068\001\069\001\024\001\071\001\081\001\
\084\001\084\001\173\001\086\001\031\001\032\001\089\001\034\001\
\035\001\036\001\037\001\038\001\059\001\040\001\087\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\081\001\194\001\
\066\001\052\001\197\001\074\001\075\001\076\001\077\001\078\001\
\046\002\047\002\001\001\084\001\000\000\064\001\087\001\001\001\
\038\001\068\001\009\001\070\001\013\001\216\001\073\001\009\001\
\046\001\220\001\081\001\001\001\081\001\080\001\081\001\024\001\
\087\001\007\001\087\001\066\001\087\001\066\001\012\001\086\001\
\014\001\034\001\035\001\036\001\037\001\038\001\066\001\066\001\
\022\001\042\001\043\001\025\001\026\001\046\001\081\001\048\001\
\086\001\001\001\081\001\033\001\087\001\000\002\001\002\081\001\
\087\001\004\002\066\001\059\001\012\001\087\001\014\001\081\001\
\064\001\012\002\081\001\014\002\015\002\087\001\022\001\066\001\
\087\001\025\001\026\001\066\001\076\001\077\001\078\001\026\002\
\081\001\033\001\000\001\001\001\063\001\066\001\066\001\195\001\
\081\001\036\002\198\001\009\001\010\001\000\000\087\001\013\001\
\001\001\015\001\081\001\017\001\018\001\019\001\084\001\021\001\
\087\001\070\001\024\001\083\001\073\001\001\001\001\001\004\001\
\088\001\031\001\032\001\080\001\034\001\035\001\036\001\037\001\
\038\001\004\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\001\001\084\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\082\001\080\001\081\001\068\001\069\001\
\070\001\071\001\072\001\087\001\074\001\075\001\076\001\077\001\
\078\001\080\001\080\001\081\001\087\001\083\001\063\001\085\001\
\081\001\087\001\088\001\000\001\001\001\081\001\087\001\081\001\
\087\001\081\001\064\001\059\001\009\001\010\001\000\000\087\001\
\013\001\081\001\015\001\081\001\017\001\018\001\019\001\087\001\
\021\001\087\001\007\001\024\001\076\001\077\001\078\001\066\001\
\081\001\085\001\031\001\032\001\068\001\034\001\035\001\036\001\
\037\001\038\001\081\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\080\001\084\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\085\001\085\001\085\001\068\001\
\069\001\070\001\071\001\072\001\064\001\074\001\075\001\076\001\
\077\001\078\001\081\001\080\001\081\001\081\001\083\001\081\001\
\085\001\068\001\087\001\088\001\000\001\001\001\081\001\085\001\
\001\001\066\001\001\001\001\001\086\001\009\001\010\001\000\000\
\086\001\013\001\086\001\015\001\083\001\017\001\018\001\019\001\
\088\001\021\001\018\001\004\001\024\001\047\001\001\001\082\001\
\080\001\073\001\083\001\031\001\032\001\083\001\034\001\035\001\
\036\001\037\001\038\001\087\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\087\001\082\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\007\001\089\001\082\001\015\001\
\068\001\069\001\070\001\071\001\072\001\059\001\074\001\075\001\
\076\001\077\001\078\001\087\001\080\001\081\001\020\001\083\001\
\019\001\085\001\084\001\087\001\088\001\000\001\001\001\047\001\
\083\001\073\001\017\001\064\001\030\001\019\001\009\001\010\001\
\000\000\066\001\013\001\082\001\015\001\064\001\017\001\018\001\
\019\001\085\001\021\001\021\001\082\001\024\001\080\001\015\001\
\080\001\080\001\017\001\017\001\031\001\032\001\083\001\034\001\
\035\001\036\001\037\001\038\001\085\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\088\001\021\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\083\001\017\001\088\001\
\083\001\068\001\069\001\070\001\071\001\072\001\018\001\074\001\
\075\001\076\001\077\001\078\001\088\001\080\001\081\001\083\001\
\083\001\018\001\085\001\083\001\087\001\088\001\000\001\001\001\
\015\000\114\000\185\000\236\000\240\000\112\000\065\000\009\001\
\010\001\000\000\109\000\013\001\108\000\015\001\041\001\017\001\
\018\001\019\001\073\000\021\001\139\001\127\000\024\001\240\001\
\041\002\041\002\253\001\253\001\073\001\031\001\032\001\255\255\
\034\001\035\001\036\001\037\001\038\001\076\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\255\255\
\255\255\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\255\255\150\001\
\150\001\255\255\068\001\069\001\070\001\071\001\072\001\255\255\
\074\001\075\001\076\001\077\001\078\001\255\255\080\001\081\001\
\255\255\083\001\255\255\085\001\255\255\087\001\088\001\000\001\
\001\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\000\000\255\255\013\001\255\255\015\001\255\255\
\017\001\018\001\019\001\255\255\021\001\255\255\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\255\255\031\001\032\001\
\255\255\034\001\035\001\036\001\037\001\038\001\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\255\255\255\255\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\255\255\060\001\061\001\062\001\063\001\255\255\
\255\255\255\255\255\255\068\001\069\001\070\001\071\001\072\001\
\255\255\074\001\075\001\076\001\077\001\078\001\255\255\080\001\
\081\001\255\255\083\001\255\255\085\001\255\255\087\001\088\001\
\000\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\000\000\255\255\013\001\255\255\015\001\
\255\255\017\001\018\001\019\001\255\255\021\001\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\255\255\034\001\035\001\036\001\037\001\038\001\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\255\255\060\001\061\001\062\001\063\001\
\255\255\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\072\001\255\255\074\001\075\001\076\001\077\001\078\001\255\255\
\080\001\081\001\255\255\083\001\255\255\085\001\255\255\087\001\
\088\001\000\001\001\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\000\000\255\255\013\001\255\255\
\015\001\255\255\017\001\018\001\019\001\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\032\001\255\255\034\001\035\001\036\001\037\001\038\001\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\255\255\255\255\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\255\255\060\001\061\001\062\001\
\063\001\255\255\255\255\255\255\255\255\068\001\069\001\070\001\
\071\001\072\001\255\255\074\001\075\001\076\001\077\001\078\001\
\255\255\080\001\081\001\255\255\083\001\255\255\085\001\255\255\
\087\001\088\001\000\001\001\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\009\001\010\001\000\000\255\255\013\001\
\255\255\015\001\255\255\017\001\018\001\019\001\255\255\021\001\
\255\255\255\255\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\031\001\032\001\255\255\034\001\035\001\036\001\037\001\
\038\001\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\255\255\255\255\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\255\255\060\001\061\001\
\062\001\063\001\255\255\255\255\255\255\255\255\068\001\069\001\
\070\001\071\001\072\001\255\255\074\001\075\001\076\001\077\001\
\078\001\255\255\080\001\081\001\255\255\083\001\255\255\085\001\
\255\255\087\001\088\001\000\001\001\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\000\000\255\255\
\013\001\255\255\015\001\255\255\017\001\018\001\019\001\255\255\
\021\001\255\255\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\032\001\255\255\034\001\035\001\036\001\
\037\001\038\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\255\255\255\255\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\255\255\060\001\
\061\001\062\001\063\001\255\255\255\255\255\255\255\255\068\001\
\069\001\070\001\071\001\072\001\255\255\074\001\075\001\255\255\
\059\001\255\255\255\255\080\001\081\001\064\001\083\001\255\255\
\085\001\255\255\087\001\088\001\000\001\001\001\255\255\074\001\
\075\001\076\001\077\001\078\001\255\255\009\001\010\001\000\000\
\255\255\013\001\255\255\015\001\255\255\017\001\018\001\019\001\
\255\255\021\001\255\255\255\255\024\001\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\255\255\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\255\255\255\255\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\255\255\
\060\001\061\001\062\001\063\001\255\255\255\255\255\255\255\255\
\068\001\069\001\070\001\071\001\072\001\255\255\074\001\075\001\
\255\255\255\255\255\255\255\255\080\001\081\001\255\255\083\001\
\255\255\085\001\255\255\087\001\088\001\000\001\001\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\000\000\255\255\013\001\255\255\015\001\255\255\017\001\018\001\
\019\001\255\255\021\001\255\255\255\255\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001\255\255\034\001\
\035\001\036\001\037\001\038\001\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\255\255\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\255\255\060\001\061\001\062\001\063\001\255\255\255\255\255\255\
\255\255\068\001\069\001\070\001\071\001\072\001\255\255\255\255\
\057\001\058\001\059\001\060\001\061\001\080\001\081\001\064\001\
\083\001\255\255\085\001\255\255\087\001\088\001\000\001\001\001\
\255\255\074\001\075\001\076\001\077\001\078\001\255\255\009\001\
\010\001\000\000\255\255\013\001\255\255\015\001\255\255\017\001\
\018\001\019\001\255\255\021\001\255\255\255\255\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\032\001\255\255\
\034\001\035\001\036\001\037\001\038\001\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\255\255\
\255\255\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\255\255\060\001\061\001\062\001\063\001\255\255\255\255\
\255\255\255\255\068\001\069\001\070\001\071\001\072\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\080\001\081\001\
\255\255\083\001\255\255\085\001\255\255\087\001\088\001\000\001\
\001\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\000\000\255\255\013\001\255\255\015\001\255\255\
\017\001\018\001\019\001\255\255\021\001\255\255\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\255\255\031\001\032\001\
\255\255\034\001\035\001\036\001\037\001\038\001\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\255\255\255\255\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\255\255\060\001\061\001\062\001\063\001\255\255\
\255\255\255\255\255\255\068\001\069\001\070\001\071\001\072\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\080\001\
\081\001\255\255\083\001\255\255\085\001\255\255\087\001\088\001\
\000\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\000\000\255\255\013\001\255\255\015\001\
\255\255\017\001\018\001\019\001\255\255\021\001\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\255\255\034\001\035\001\036\001\037\001\038\001\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\255\255\060\001\061\001\062\001\063\001\
\255\255\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\072\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\080\001\081\001\255\255\083\001\255\255\085\001\255\255\087\001\
\088\001\000\001\001\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\000\000\255\255\013\001\255\255\
\015\001\255\255\017\001\018\001\019\001\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\032\001\255\255\034\001\035\001\036\001\037\001\038\001\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\255\255\255\255\051\001\052\001\053\001\054\001\
\055\001\056\001\255\255\255\255\255\255\255\255\255\255\062\001\
\063\001\255\255\255\255\255\255\255\255\068\001\069\001\070\001\
\071\001\072\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\080\001\081\001\255\255\083\001\255\255\085\001\255\255\
\087\001\088\001\000\001\001\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\009\001\010\001\000\000\255\255\013\001\
\255\255\015\001\255\255\017\001\018\001\019\001\255\255\021\001\
\255\255\255\255\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\031\001\032\001\255\255\034\001\035\001\036\001\037\001\
\038\001\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\255\255\255\255\051\001\052\001\053\001\
\054\001\055\001\056\001\255\255\255\255\255\255\255\255\255\255\
\062\001\063\001\255\255\255\255\255\255\255\255\068\001\069\001\
\070\001\071\001\072\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\080\001\081\001\255\255\083\001\255\255\085\001\
\255\255\087\001\088\001\000\001\001\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\000\000\255\255\
\013\001\255\255\015\001\255\255\017\001\018\001\019\001\255\255\
\021\001\255\255\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\032\001\255\255\034\001\035\001\036\001\
\037\001\038\001\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\255\255\255\255\051\001\052\001\
\053\001\054\001\055\001\056\001\255\255\255\255\255\255\255\255\
\255\255\062\001\063\001\255\255\255\255\255\255\255\255\068\001\
\069\001\070\001\071\001\072\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\080\001\081\001\255\255\083\001\255\255\
\085\001\255\255\087\001\088\001\000\001\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\009\001\010\001\000\000\
\255\255\013\001\255\255\015\001\255\255\017\001\018\001\019\001\
\255\255\021\001\255\255\255\255\024\001\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\255\255\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\255\255\255\255\051\001\
\052\001\053\001\054\001\055\001\056\001\255\255\255\255\255\255\
\255\255\255\255\062\001\063\001\255\255\255\255\255\255\255\255\
\068\001\069\001\070\001\071\001\072\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\080\001\081\001\255\255\083\001\
\255\255\085\001\255\255\087\001\088\001\000\001\001\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\000\000\255\255\013\001\255\255\015\001\255\255\017\001\018\001\
\019\001\255\255\021\001\255\255\255\255\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001\255\255\034\001\
\035\001\036\001\037\001\038\001\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\255\255\255\255\
\051\001\052\001\063\001\255\255\055\001\056\001\255\255\068\001\
\069\001\070\001\071\001\062\001\063\001\074\001\075\001\255\255\
\063\001\068\001\069\001\070\001\001\001\068\001\069\001\070\001\
\071\001\255\255\087\001\074\001\075\001\080\001\081\001\012\001\
\083\001\014\001\085\001\255\255\087\001\088\001\000\001\001\001\
\087\001\022\001\255\255\255\255\025\001\026\001\255\255\009\001\
\010\001\000\000\255\255\013\001\033\001\015\001\255\255\017\001\
\018\001\019\001\255\255\021\001\255\255\255\255\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\032\001\255\255\
\034\001\035\001\036\001\037\001\038\001\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\255\255\
\255\255\051\001\052\001\063\001\255\255\055\001\056\001\255\255\
\068\001\069\001\070\001\071\001\062\001\063\001\255\255\084\001\
\255\255\063\001\068\001\069\001\070\001\001\001\068\001\069\001\
\070\001\071\001\255\255\087\001\074\001\075\001\080\001\081\001\
\012\001\083\001\014\001\085\001\255\255\087\001\088\001\000\001\
\001\001\087\001\022\001\255\255\255\255\025\001\026\001\255\255\
\009\001\010\001\000\000\255\255\013\001\033\001\015\001\255\255\
\017\001\018\001\019\001\255\255\021\001\255\255\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\255\255\031\001\032\001\
\255\255\034\001\035\001\036\001\037\001\038\001\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\063\001\255\255\051\001\052\001\255\255\068\001\069\001\070\001\
\071\001\255\255\255\255\074\001\075\001\062\001\063\001\255\255\
\084\001\255\255\255\255\068\001\069\001\070\001\255\255\255\255\
\087\001\255\255\255\255\255\255\255\255\255\255\255\255\080\001\
\081\001\255\255\083\001\255\255\085\001\255\255\087\001\088\001\
\000\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\000\000\255\255\013\001\255\255\015\001\
\255\255\017\001\018\001\019\001\255\255\021\001\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\255\255\034\001\035\001\036\001\037\001\038\001\059\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\013\001\070\001\051\001\052\001\255\255\074\001\075\001\
\076\001\077\001\078\001\255\255\024\001\255\255\062\001\063\001\
\255\255\255\255\255\255\255\255\068\001\069\001\034\001\035\001\
\036\001\037\001\038\001\255\255\255\255\255\255\042\001\043\001\
\080\001\081\001\046\001\083\001\048\001\085\001\255\255\087\001\
\088\001\000\001\001\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\000\000\255\255\013\001\255\255\
\015\001\255\255\017\001\018\001\019\001\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\032\001\255\255\034\001\035\001\036\001\037\001\038\001\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\255\255\255\255\051\001\052\001\255\255\255\255\
\255\255\059\001\255\255\255\255\255\255\255\255\255\255\062\001\
\063\001\255\255\068\001\069\001\070\001\068\001\000\000\255\255\
\074\001\075\001\076\001\077\001\078\001\255\255\255\255\255\255\
\255\255\080\001\081\001\255\255\083\001\087\001\085\001\255\255\
\087\001\088\001\000\001\001\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\009\001\010\001\255\255\255\255\013\001\
\255\255\015\001\255\255\017\001\018\001\019\001\255\255\021\001\
\255\255\255\255\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\031\001\032\001\255\255\034\001\035\001\036\001\037\001\
\038\001\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\053\001\054\001\051\001\052\001\057\001\
\058\001\059\001\060\001\061\001\255\255\255\255\064\001\000\000\
\062\001\063\001\255\255\255\255\255\255\071\001\072\001\255\255\
\074\001\075\001\076\001\077\001\078\001\255\255\255\255\255\255\
\255\255\255\255\080\001\081\001\255\255\083\001\255\255\085\001\
\255\255\087\001\088\001\000\001\001\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\255\255\255\255\
\013\001\255\255\015\001\255\255\017\001\018\001\019\001\255\255\
\021\001\255\255\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\032\001\000\000\034\001\035\001\036\001\
\037\001\038\001\059\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\069\001\070\001\051\001\052\001\
\000\000\074\001\075\001\076\001\077\001\078\001\255\255\063\001\
\255\255\062\001\063\001\255\255\068\001\069\001\070\001\071\001\
\255\255\000\000\074\001\075\001\076\001\077\001\078\001\255\255\
\255\255\255\255\255\255\080\001\081\001\255\255\083\001\087\001\
\085\001\255\255\087\001\088\001\000\001\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\009\001\010\001\255\255\
\000\000\013\001\255\255\015\001\255\255\017\001\018\001\019\001\
\255\255\021\001\255\255\255\255\024\001\255\255\255\255\255\255\
\255\255\000\000\255\255\031\001\032\001\255\255\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\255\255\255\255\051\001\
\255\255\255\255\255\255\255\255\255\255\255\255\000\001\001\001\
\000\000\255\255\062\001\063\001\255\255\255\255\255\255\009\001\
\010\001\255\255\255\255\013\001\255\255\015\001\255\255\017\001\
\018\001\019\001\255\255\021\001\080\001\081\001\024\001\083\001\
\255\255\085\001\255\255\087\001\088\001\031\001\032\001\255\255\
\034\001\035\001\036\001\037\001\038\001\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\255\255\
\000\000\255\255\255\255\255\255\255\255\059\001\255\255\255\255\
\255\255\063\001\255\255\255\255\062\001\063\001\068\001\069\001\
\070\001\000\000\255\255\255\255\074\001\075\001\076\001\077\001\
\078\001\255\255\255\255\255\255\255\255\255\255\080\001\081\001\
\001\001\083\001\255\255\085\001\255\255\087\001\088\001\255\255\
\009\001\010\001\255\255\255\255\013\001\255\255\255\255\255\255\
\000\000\255\255\019\001\255\255\021\001\255\255\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\255\255\031\001\032\001\
\255\255\034\001\035\001\036\001\037\001\038\001\255\255\040\001\
\255\255\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\255\255\255\255\255\255\052\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\068\001\255\255\070\001\255\255\255\255\
\073\001\013\001\255\255\255\255\255\255\255\255\255\255\080\001\
\081\001\001\001\255\255\255\255\024\001\255\255\087\001\255\255\
\255\255\009\001\010\001\255\255\255\255\013\001\034\001\035\001\
\036\001\037\001\038\001\019\001\255\255\021\001\042\001\043\001\
\024\001\255\255\046\001\255\255\048\001\255\255\013\001\031\001\
\032\001\255\255\034\001\035\001\036\001\037\001\038\001\255\255\
\040\001\024\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\001\001\000\000\034\001\035\001\036\001\037\001\038\001\
\255\255\009\001\010\001\042\001\043\001\013\001\255\255\046\001\
\255\255\048\001\255\255\019\001\068\001\021\001\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\013\001\031\001\
\032\001\081\001\034\001\035\001\036\001\037\001\038\001\087\001\
\040\001\024\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\001\001\000\000\034\001\035\001\036\001\037\001\038\001\
\255\255\009\001\010\001\042\001\043\001\013\001\255\255\046\001\
\255\255\048\001\255\255\019\001\068\001\021\001\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\081\001\034\001\035\001\036\001\037\001\038\001\087\001\
\040\001\255\255\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\009\001\010\001\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\019\001\068\001\021\001\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\013\001\031\001\
\032\001\081\001\034\001\035\001\036\001\037\001\038\001\087\001\
\040\001\024\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\001\001\255\255\034\001\035\001\036\001\037\001\038\001\
\000\000\009\001\010\001\042\001\043\001\013\001\255\255\046\001\
\255\255\048\001\255\255\019\001\068\001\021\001\255\255\255\255\
\024\001\000\000\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\081\001\034\001\035\001\036\001\037\001\038\001\087\001\
\040\001\255\255\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\255\255\255\255\013\001\255\255\255\255\
\000\000\255\255\255\255\255\255\068\001\255\255\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\081\001\034\001\035\001\036\001\037\001\038\001\087\001\
\040\001\255\255\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\255\255\001\001\255\255\255\255\255\255\255\255\
\016\001\255\255\255\255\009\001\010\001\255\255\255\255\013\001\
\255\255\081\001\255\255\255\255\028\001\029\001\255\255\087\001\
\000\000\255\255\024\001\255\255\255\255\255\255\255\255\039\001\
\255\255\031\001\032\001\255\255\034\001\035\001\036\001\037\001\
\038\001\255\255\040\001\255\255\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\001\001\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\067\001\010\001\255\255\255\255\013\001\
\255\255\255\255\074\001\075\001\255\255\255\255\255\255\079\001\
\255\255\255\255\024\001\255\255\000\000\255\255\086\001\255\255\
\255\255\255\255\032\001\081\001\034\001\035\001\036\001\037\001\
\038\001\087\001\255\255\255\255\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\063\001\010\001\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\024\001\255\255\255\255\081\001\255\255\255\255\255\255\085\001\
\032\001\087\001\034\001\035\001\036\001\037\001\038\001\255\255\
\255\255\255\255\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\001\001\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\010\001\255\255\255\255\013\001\255\255\255\255\
\064\001\255\255\001\001\000\000\255\255\255\255\255\255\255\255\
\024\001\255\255\255\255\010\001\255\255\255\255\013\001\255\255\
\032\001\255\255\034\001\035\001\036\001\037\001\038\001\255\255\
\255\255\024\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\032\001\000\000\034\001\035\001\036\001\037\001\038\001\
\255\255\001\001\255\255\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\010\001\000\000\059\001\013\001\255\255\255\255\
\063\001\255\255\255\255\255\255\255\255\068\001\069\001\070\001\
\024\001\255\255\000\000\074\001\075\001\076\001\077\001\078\001\
\032\001\255\255\034\001\035\001\036\001\037\001\038\001\255\255\
\255\255\001\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\009\001\255\255\255\255\000\000\013\001\255\255\063\001\
\255\255\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\024\001\255\255\074\001\075\001\076\001\077\001\078\001\031\001\
\255\255\001\001\034\001\035\001\036\001\037\001\038\001\087\001\
\040\001\009\001\042\001\043\001\255\255\013\001\046\001\047\001\
\048\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\255\255\001\001\034\001\035\001\036\001\037\001\038\001\255\255\
\040\001\009\001\042\001\043\001\255\255\013\001\046\001\047\001\
\048\001\255\255\255\255\255\255\255\255\001\001\255\255\255\255\
\024\001\255\255\255\255\255\255\255\255\009\001\255\255\031\001\
\255\255\013\001\034\001\035\001\036\001\037\001\038\001\255\255\
\040\001\255\255\042\001\043\001\024\001\255\255\046\001\047\001\
\048\001\255\255\255\255\031\001\255\255\001\001\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\009\001\042\001\043\001\
\255\255\013\001\046\001\047\001\048\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\255\255\255\255\
\255\255\255\255\013\001\031\001\255\255\255\255\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\024\001\042\001\043\001\
\255\255\255\255\046\001\047\001\048\001\001\001\255\255\034\001\
\035\001\036\001\037\001\038\001\255\255\009\001\255\255\042\001\
\043\001\013\001\255\255\046\001\255\255\048\001\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\255\255\255\255\
\013\001\255\255\255\255\031\001\255\255\255\255\034\001\035\001\
\036\001\037\001\038\001\024\001\040\001\255\255\042\001\043\001\
\255\255\255\255\046\001\047\001\048\001\034\001\035\001\036\001\
\037\001\038\001\255\255\255\255\059\001\042\001\043\001\013\001\
\063\001\046\001\255\255\048\001\255\255\068\001\069\001\070\001\
\255\255\255\255\024\001\074\001\075\001\076\001\077\001\078\001\
\013\001\255\255\255\255\255\255\034\001\035\001\036\001\037\001\
\038\001\255\255\255\255\024\001\042\001\043\001\255\255\013\001\
\046\001\038\000\048\001\255\255\255\255\034\001\035\001\036\001\
\037\001\038\001\024\001\255\255\255\255\042\001\043\001\255\255\
\255\255\046\001\255\255\048\001\034\001\035\001\036\001\037\001\
\038\001\013\001\255\255\255\255\042\001\043\001\255\255\255\255\
\046\001\000\001\048\001\255\255\024\001\255\255\255\255\076\000\
\255\255\078\000\079\000\080\000\255\255\255\255\034\001\035\001\
\036\001\037\001\038\001\255\255\255\255\059\001\042\001\043\001\
\255\255\063\001\046\001\255\255\048\001\255\255\068\001\069\001\
\070\001\102\000\255\255\104\000\074\001\075\001\076\001\077\001\
\078\001\110\000\255\255\112\000\255\255\255\255\255\255\255\255\
\255\255\118\000\119\000\255\255\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\255\255\064\001\255\255\255\255\255\255\068\001\069\001\070\001\
\071\001\072\001\255\255\074\001\075\001\076\001\077\001\078\001\
\000\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\087\001\255\255\255\255\255\255\161\000\255\255\255\255\255\255\
\016\001\000\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\059\001\255\255\255\255\028\001\029\001\255\255\255\255\
\255\255\016\001\068\001\069\001\070\001\071\001\255\255\039\001\
\074\001\075\001\076\001\077\001\078\001\028\001\029\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\039\001\255\255\064\001\255\255\255\255\255\255\068\001\069\001\
\070\001\071\001\072\001\067\001\074\001\075\001\076\001\077\001\
\078\001\255\255\074\001\075\001\255\255\255\255\255\255\079\001\
\255\255\255\255\255\255\255\255\067\001\255\255\086\001\255\255\
\255\255\255\255\239\000\074\001\075\001\242\000\243\000\255\255\
\079\001\255\255\255\255\255\255\255\255\255\255\255\255\086\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\255\255\255\255\012\001\255\255\014\001\255\255\016\001\
\255\255\255\255\255\255\255\255\255\255\022\001\255\255\255\255\
\025\001\026\001\255\255\028\001\029\001\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\255\255\255\255\039\001\036\001\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\067\001\255\255\028\001\029\001\255\255\255\255\
\255\255\074\001\075\001\255\255\255\255\255\255\079\001\039\001\
\255\255\255\255\255\255\084\001\255\255\086\001\063\001\255\255\
\255\255\255\255\255\255\068\001\069\001\070\001\071\001\019\001\
\255\255\074\001\075\001\076\001\077\001\078\001\255\255\255\255\
\255\255\255\255\255\255\067\001\255\255\255\255\087\001\255\255\
\255\255\255\255\074\001\075\001\255\255\255\255\255\255\079\001\
\255\255\255\255\082\001\255\255\255\255\021\001\086\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\255\255\064\001\255\255\255\255\255\255\
\068\001\069\001\070\001\071\001\072\001\255\255\074\001\075\001\
\076\001\077\001\078\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\255\255\
\064\001\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\072\001\041\001\074\001\075\001\076\001\077\001\078\001\255\255\
\255\255\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\255\255\
\064\001\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\072\001\041\001\074\001\075\001\076\001\077\001\078\001\255\255\
\255\255\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\255\255\
\064\001\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\072\001\041\001\074\001\075\001\076\001\077\001\078\001\255\255\
\255\255\255\255\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\255\255\
\064\001\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\072\001\255\255\074\001\075\001\076\001\077\001\078\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\255\255\064\001\255\255\255\255\255\255\
\068\001\069\001\070\001\071\001\072\001\255\255\074\001\075\001\
\076\001\077\001\078\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\087\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\255\255\064\001\255\255\255\255\255\255\068\001\069\001\070\001\
\071\001\072\001\255\255\074\001\075\001\076\001\077\001\078\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\087\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\255\255\064\001\255\255\
\255\255\255\255\068\001\069\001\070\001\071\001\072\001\255\255\
\074\001\075\001\076\001\077\001\078\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\087\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\255\255\064\001\255\255\255\255\255\255\068\001\
\069\001\070\001\071\001\072\001\255\255\074\001\075\001\076\001\
\077\001\078\001\255\255\255\255\081\001\255\255\255\255\255\255\
\085\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\255\255\064\001\255\255\
\255\255\255\255\068\001\069\001\070\001\071\001\072\001\255\255\
\074\001\075\001\076\001\077\001\078\001\255\255\255\255\255\255\
\255\255\255\255\255\255\085\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\255\255\064\001\255\255\255\255\255\255\068\001\069\001\070\001\
\071\001\072\001\255\255\074\001\075\001\076\001\077\001\078\001\
\255\255\255\255\255\255\255\255\255\255\255\255\085\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\255\255\064\001\255\255\255\255\255\255\
\068\001\069\001\070\001\071\001\072\001\255\255\074\001\075\001\
\076\001\077\001\078\001\255\255\255\255\255\255\255\255\255\255\
\255\255\085\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\255\255\064\001\
\255\255\255\255\255\255\068\001\069\001\070\001\071\001\072\001\
\255\255\074\001\075\001\076\001\077\001\078\001\255\255\255\255\
\255\255\255\255\255\255\255\255\085\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\255\255\064\001\255\255\255\255\255\255\068\001\069\001\
\070\001\071\001\072\001\255\255\074\001\075\001\076\001\077\001\
\078\001\255\255\255\255\255\255\255\255\083\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\255\255\064\001\255\255\255\255\255\255\068\001\
\069\001\070\001\071\001\072\001\255\255\074\001\075\001\076\001\
\077\001\078\001\255\255\255\255\255\255\255\255\083\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\255\255\064\001\255\255\255\255\255\255\
\068\001\069\001\070\001\071\001\072\001\255\255\074\001\075\001\
\076\001\077\001\078\001\255\255\255\255\255\255\255\255\083\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\255\255\064\001\255\255\255\255\
\255\255\068\001\069\001\070\001\071\001\072\001\255\255\074\001\
\075\001\076\001\077\001\078\001\255\255\255\255\255\255\255\255\
\083\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\255\255\064\001\255\255\
\255\255\255\255\068\001\069\001\070\001\071\001\072\001\255\255\
\074\001\075\001\076\001\077\001\078\001\255\255\080\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\255\255\064\001\255\255\255\255\255\255\
\068\001\069\001\070\001\071\001\072\001\255\255\074\001\075\001\
\076\001\077\001\078\001\255\255\080\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\255\255\255\255\255\255\068\001\069\001\
\070\001\071\001\072\001\255\255\074\001\075\001\076\001\077\001\
\078\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\255\255\
\255\255\255\255\068\001\069\001\070\001\071\001\072\001\255\255\
\074\001\075\001\076\001\077\001\078\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\255\255\064\001\255\255\255\255\255\255\068\001\069\001\
\070\001\071\001\072\001\255\255\074\001\075\001\076\001\077\001\
\078\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\255\255\255\255\064\001\255\255\
\255\255\255\255\068\001\069\001\070\001\071\001\072\001\255\255\
\074\001\075\001\076\001\077\001\078\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\255\255\
\255\255\064\001\255\255\255\255\255\255\068\001\069\001\070\001\
\071\001\072\001\255\255\074\001\075\001\076\001\077\001\078\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\255\255\255\255\064\001\255\255\255\255\255\255\255\255\
\069\001\070\001\071\001\072\001\255\255\074\001\075\001\076\001\
\077\001\078\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\255\255\255\255\064\001\255\255\255\255\
\255\255\255\255\255\255\070\001\071\001\072\001\255\255\074\001\
\075\001\076\001\077\001\078\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\255\255\255\255\064\001\
\255\255\255\255\255\255\255\255\255\255\255\255\071\001\072\001\
\255\255\074\001\075\001\076\001\077\001\078\001\063\001\255\255\
\255\255\255\255\255\255\068\001\069\001\070\001\071\001\255\255\
\059\001\074\001\075\001\076\001\077\001\078\001\255\255\255\255\
\255\255\068\001\069\001\070\001\071\001\059\001\087\001\074\001\
\075\001\076\001\077\001\078\001\255\255\255\255\068\001\069\001\
\070\001\071\001\059\001\255\255\074\001\075\001\076\001\077\001\
\078\001\255\255\255\255\068\001\069\001\070\001\071\001\255\255\
\255\255\074\001\075\001\076\001\077\001\078\001\059\001\255\255\
\255\255\255\255\063\001\255\255\255\255\255\255\255\255\068\001\
\069\001\070\001\059\001\255\255\255\255\074\001\075\001\076\001\
\077\001\078\001\255\255\068\001\069\001\070\001\071\001\255\255\
\255\255\074\001\075\001\076\001\077\001\078\001"

let yynames_const = "\
  DOLLAR\000\
  ACTION\000\
  ALIAS\000\
  ATTR\000\
  BOOL\000\
  CANON\000\
  CARD\000\
  CASE\000\
  COERCE\000\
  DEFAULT\000\
  DO\000\
  ELSE\000\
  ENDDO\000\
  ENDIF\000\
  ENUM\000\
  ERROR\000\
  EXTEND\000\
  FIX\000\
  FLOAT\000\
  FOR\000\
  FORMAT\000\
  IF\000\
  IN\000\
  IMAGE\000\
  INITIALA\000\
  INT\000\
  SWITCH\000\
  SYNTAX\000\
  THEN\000\
  VOLATILE\000\
  PORTS\000\
  USES\000\
  MACRO\000\
  EOF\000\
  NOT\000\
  OR\000\
  AND\000\
  LEQ\000\
  GEQ\000\
  EQU\000\
  NEQ\000\
  LEFT_SHIFT\000\
  RIGHT_SHIFT\000\
  DOUBLE_STAR\000\
  ROTATE_RIGHT\000\
  ROTATE_LEFT\000\
  DOUBLE_COLON\000\
  DOUBLE_DOT\000\
  BIT_LEFT\000\
  BIT_RIGHT\000\
  EQ\000\
  EXCLAM\000\
  PIPE\000\
  CIRC\000\
  AMPERS\000\
  GT\000\
  LT\000\
  SHARP\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  PERCENT\000\
  TILD\000\
  COLON\000\
  COMMA\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  LPAREN\000\
  RPAREN\000\
  SEMI\000\
  DOT\000\
  AROBAS\000\
  "

let yynames_block = "\
  ID\000\
  BIN_CONST\000\
  BIN_CONST_64\000\
  CARD_CONST\000\
  CARD_CONST_64\000\
  FIXED_CONST\000\
  STRING_CONST\000\
  LET\000\
  MEM\000\
  MODE\000\
  OP\000\
  REG\000\
  TYPE\000\
  VAR\000\
  RESOURCE\000\
  EXCEPTION\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'specs) in
    Obj.repr(
# 208 "parser.mly"
            ( Sem.final_checks () )
# 1971 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 212 "parser.mly"
    ( Irg.add_pos _1 !Lexer.file !Lexer.line;
			(_1, (!Lexer.file, !Lexer.line))
		)
# 1980 "parser.ml"
               : 'LocatedID))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MachineSpec) in
    Obj.repr(
# 217 "parser.mly"
               (   )
# 1987 "parser.ml"
               : 'specs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'specs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'MachineSpec) in
    Obj.repr(
# 218 "parser.mly"
                     (   )
# 1995 "parser.ml"
               : 'specs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'LetDef) in
    Obj.repr(
# 222 "parser.mly"
             ( Irg.add_symbol (fst _1) (snd _1) )
# 2002 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TypeSpec) in
    Obj.repr(
# 223 "parser.mly"
               ( Sem.add_spec (fst _1) (snd _1) )
# 2009 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MemorySpec) in
    Obj.repr(
# 224 "parser.mly"
                ( Sem.add_spec (fst _1) (snd _1) )
# 2016 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'RegisterSpec) in
    Obj.repr(
# 225 "parser.mly"
                 ( (*Sem.add_spec (fst $1) (snd $1)*) )
# 2023 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'VarSpec) in
    Obj.repr(
# 226 "parser.mly"
              ( Sem.add_spec (fst _1) (snd _1) )
# 2030 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ModeSpec) in
    Obj.repr(
# 227 "parser.mly"
              ( Sem.add_spec (fst _1) (snd _1); )
# 2037 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'OpSpec) in
    Obj.repr(
# 228 "parser.mly"
             ( Sem.add_spec (fst _1) (snd _1); )
# 2044 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ResourceSpec) in
    Obj.repr(
# 229 "parser.mly"
                 ( )
# 2051 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ExceptionSpec) in
    Obj.repr(
# 230 "parser.mly"
                  ( )
# 2058 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ExtendSpec) in
    Obj.repr(
# 231 "parser.mly"
              ( )
# 2065 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CanonSpec) in
    Obj.repr(
# 232 "parser.mly"
              ( Irg.add_symbol (fst _1) (snd _1); Irg.add_canon (fst _1) (snd _1) )
# 2072 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 237 "parser.mly"
                            (  (fst _2, Sem.make_let _2 Irg.NO_TYPE _4) )
# 2081 "parser.ml"
               : 'LetDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 238 "parser.mly"
                                      (  (fst _2, Sem.make_let _2 _4 _6) )
# 2091 "parser.ml"
               : 'LetDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ResourceList) in
    Obj.repr(
# 242 "parser.mly"
                       ( _2 )
# 2099 "parser.ml"
               : 'ResourceSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Resource) in
    Obj.repr(
# 246 "parser.mly"
            ( [_1] )
# 2106 "parser.ml"
               : 'ResourceList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ResourceList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Resource) in
    Obj.repr(
# 247 "parser.mly"
                              ( _3::_1 )
# 2114 "parser.ml"
               : 'ResourceList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'LocatedID) in
    Obj.repr(
# 251 "parser.mly"
                 ( Irg.add_symbol (fst _1) (Irg.RES (fst _1)); _1 )
# 2121 "parser.ml"
               : 'Resource))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'LocatedID) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Int32.t) in
    Obj.repr(
# 252 "parser.mly"
                                     ( Irg.add_symbol (fst _1) (Irg.RES (fst _1)); _1 )
# 2129 "parser.ml"
               : 'Resource))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'CanonParamList) in
    Obj.repr(
# 257 "parser.mly"
  ( (_2, Irg.CANON_DEF(_2, Irg.CANON_FUNC, Irg.NO_TYPE, _4)) )
# 2137 "parser.ml"
               : 'CanonSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'CanonParamList) in
    Obj.repr(
# 259 "parser.mly"
  ( (_3, Irg.CANON_DEF(_3, Irg.CANON_FUNC, _2, _5)) )
# 2146 "parser.ml"
               : 'CanonSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 261 "parser.mly"
  ( (_2, Irg.CANON_DEF(_2, Irg.CANON_FUNC, Irg.NO_TYPE, [])) )
# 2153 "parser.ml"
               : 'CanonSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 263 "parser.mly"
  ( (_3, Irg.CANON_DEF(_3, Irg.CANON_FUNC, _2, [])) )
# 2161 "parser.ml"
               : 'CanonSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 265 "parser.mly"
  ( (_3, Irg.CANON_DEF(_3, Irg.CANON_CNST, _2, [])) )
# 2169 "parser.ml"
               : 'CanonSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CanonParam) in
    Obj.repr(
# 269 "parser.mly"
                 ( [_1] )
# 2176 "parser.ml"
               : 'CanonParamList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'CanonParamList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'CanonParam) in
    Obj.repr(
# 270 "parser.mly"
                                  ( _3::_1 )
# 2184 "parser.ml"
               : 'CanonParamList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 274 "parser.mly"
          ( _1 )
# 2191 "parser.ml"
               : 'CanonParam))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'LocatedID) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 275 "parser.mly"
                       ( _3 )
# 2199 "parser.ml"
               : 'CanonParam))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'IdentifierList) in
    Obj.repr(
# 279 "parser.mly"
                          ( _2 )
# 2207 "parser.ml"
               : 'ExceptionSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'LocatedID) in
    Obj.repr(
# 283 "parser.mly"
                ( [_1] )
# 2214 "parser.ml"
               : 'IdentifierList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'IdentifierList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'LocatedID) in
    Obj.repr(
# 284 "parser.mly"
                                 ( _3::_1 )
# 2222 "parser.ml"
               : 'IdentifierList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'TypeExpr) in
    Obj.repr(
# 289 "parser.mly"
  ( (fst _2, Sem.make_type _2 _4) )
# 2231 "parser.ml"
               : 'TypeSpec))
; (fun __caml_parser_env ->
    Obj.repr(
# 294 "parser.mly"
  ( Irg.BOOL )
# 2237 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'LetExpr) in
    Obj.repr(
# 296 "parser.mly"
  ( Irg.INT (Sem.to_int (Sem.eval_const _3)) )
# 2244 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'LetExpr) in
    Obj.repr(
# 298 "parser.mly"
  ( Irg.CARD (Sem.to_int (Sem.eval_const _3)) )
# 2251 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'LetExpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'LetExpr) in
    Obj.repr(
# 300 "parser.mly"
  ( Irg.FIX (
			Sem.to_int (Sem.eval_const _3),
			Sem.to_int (Sem.eval_const _5)) )
# 2261 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'LetExpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'LetExpr) in
    Obj.repr(
# 304 "parser.mly"
  ( Irg.FLOAT (
			Sem.to_int (Sem.eval_const _3),
			Sem.to_int (Sem.eval_const _5)) )
# 2271 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'LetExpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'LetExpr) in
    Obj.repr(
# 308 "parser.mly"
  (
		let v1=Sem.to_int32 (Sem.eval_const _2)
		and v2=Sem.to_int32 (Sem.eval_const _4)
		in
		if ((Int32.compare v1 v2)<=0)
			then Irg.RANGE (v1,v2)
			else
				Irg.error (Irg.output [
					Irg.PTEXT "In a range type declaration, the first operand must be lesser than the second\n";
					Irg.PTEXT (Printf.sprintf "Value of the first operand : %d\n Value of the second operand : %d"
						(Int32.to_int v1) (Int32.to_int v2))])
		 )
# 2290 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ValueList) in
    Obj.repr(
# 321 "parser.mly"
  ( Irg.ENUM (Sem.uniq (List.sort Int32.compare _3)) )
# 2297 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Value) in
    Obj.repr(
# 324 "parser.mly"
                      ( _1 )
# 2304 "parser.ml"
               : 'ValueList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ValueList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Value) in
    Obj.repr(
# 325 "parser.mly"
                           ( _1 @ _3 )
# 2312 "parser.ml"
               : 'ValueList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 328 "parser.mly"
                     ( [Sem.to_int32 (Sem.eval_const _1)] )
# 2319 "parser.ml"
               : 'Value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'LetExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 329 "parser.mly"
                               ( Sem.enum_values (Sem.to_int32 (Sem.eval_const _1)) (Sem.to_int32 (Sem.eval_const _3)) )
# 2327 "parser.ml"
               : 'Value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 333 "parser.mly"
       ( _1 )
# 2334 "parser.ml"
               : 'LetExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'MemPart) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'OptionalMemAttrDefList) in
    Obj.repr(
# 338 "parser.mly"
  ( (fst _2, Sem.make_mem _2 (fst _4) (snd _4) _6) )
# 2344 "parser.ml"
               : 'MemorySpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'RegPart) in
    Obj.repr(
# 342 "parser.mly"
 ( Sem.add_spec (fst _2) (Sem.make_reg _2 (fst _4) (snd _4) []); _2 )
# 2353 "parser.ml"
               : 'RegisterSpecHeader))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'RegisterSpecHeader) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'OptionalMemAttrDefList) in
    Obj.repr(
# 346 "parser.mly"
  ( Sem.add_atts (fst _1) _2 )
# 2361 "parser.ml"
               : 'RegisterSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'RegPart) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'OptionalMemAttrDefList) in
    Obj.repr(
# 351 "parser.mly"
  ( (fst _2, Sem.make_var _2 (fst _4) (snd _4) _6) )
# 2371 "parser.ml"
               : 'VarSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'LetExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 355 "parser.mly"
                      ( Sem.to_int (Sem.eval_const _1), _3 )
# 2379 "parser.ml"
               : 'MemPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 356 "parser.mly"
            ( Sem.to_int (Sem.eval_const _1), Irg.INT 8 )
# 2386 "parser.ml"
               : 'MemPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'LetExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 360 "parser.mly"
                      ( Sem.to_int (Sem.eval_const _1), _3 )
# 2394 "parser.ml"
               : 'RegPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 361 "parser.mly"
         ( 1, _1 )
# 2401 "parser.ml"
               : 'RegPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TypeExpr) in
    Obj.repr(
# 365 "parser.mly"
           ( _1 )
# 2408 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 366 "parser.mly"
       ( Sem.type_from_id _1 )
# 2415 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    Obj.repr(
# 370 "parser.mly"
              ( [] )
# 2421 "parser.ml"
               : 'OptionalMemAttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MemAttrDefList) in
    Obj.repr(
# 371 "parser.mly"
                  ( _1 )
# 2428 "parser.ml"
               : 'OptionalMemAttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MemAttrDef) in
    Obj.repr(
# 375 "parser.mly"
              ( [_1] )
# 2435 "parser.ml"
               : 'MemAttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'MemAttrDefList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'MemAttrDef) in
    Obj.repr(
# 376 "parser.mly"
                            ( _2::_1 )
# 2443 "parser.ml"
               : 'MemAttrDefList))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 381 "parser.mly"
  ( Irg.ATTR_EXPR ("volatile", Irg.CONST (Irg.NO_TYPE, (Sem.eval_const _3))) )
# 2450 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 383 "parser.mly"
  ( Irg.ATTR_EXPR ("init", Irg.CONST (Irg.NO_TYPE, Sem.eval_const _3)) )
# 2457 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Int32.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Int32.t) in
    Obj.repr(
# 385 "parser.mly"
  ( Irg.ATTR_USES )
# 2465 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'UsesDef) in
    Obj.repr(
# 387 "parser.mly"
  ( Irg.ATTR_USES )
# 2472 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'MemLocation) in
    Obj.repr(
# 389 "parser.mly"
  ( Irg.ATTR_LOC ("alias", _3) )
# 2479 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 391 "parser.mly"
  ( Irg.ATTR_EXPR (_1, _3) )
# 2487 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'Sequence) in
    Obj.repr(
# 393 "parser.mly"
  ( let r = Irg.ATTR_STAT (_1, _4) in Sem.reset_local(); r )
# 2495 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MemLocBase) in
    Obj.repr(
# 398 "parser.mly"
  ( Irg.LOC_REF (Sem.get_loc_ref_type (fst _1), fst _1, snd _1, Irg.NONE, Irg.NONE) )
# 2502 "parser.ml"
               : 'MemLocation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'MemLocBase) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Bit_Expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 400 "parser.mly"
  (  Irg.LOC_REF (Sem.get_loc_ref_type (fst _1), fst _1, snd _1, _3, _5) )
# 2511 "parser.ml"
               : 'MemLocation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 405 "parser.mly"
  ( (_1, Irg.NONE) )
# 2518 "parser.ml"
               : 'MemLocBase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 407 "parser.mly"
  ( (_1, Irg.CONST (Irg.CARD(32), Sem.eval_const _3)) )
# 2526 "parser.ml"
               : 'MemLocBase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ParamList) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'OptionalModeExpr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AttrDefList) in
    Obj.repr(
# 412 "parser.mly"
  (
			Irg.param_unstack _4;
			Irg.attr_unstack _7;
			(fst _2, Sem.make_and_mode _2 _4 _6 _7)
		)
# 2541 "parser.ml"
               : 'ModeSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Identifier_Or_List) in
    Obj.repr(
# 418 "parser.mly"
  ( (fst _2, Sem.make_or_mode _2 _4) )
# 2550 "parser.ml"
               : 'ModeSpec))
; (fun __caml_parser_env ->
    Obj.repr(
# 424 "parser.mly"
             ( Irg.NONE )
# 2556 "parser.ml"
               : 'OptionalModeExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 425 "parser.mly"
           ( _2 )
# 2563 "parser.ml"
               : 'OptionalModeExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ParamList) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'AttrDefList) in
    Obj.repr(
# 430 "parser.mly"
  (
			Irg.param_unstack _4;
			Irg.attr_unstack _6;			
			(fst _2, Sem.make_and_op _2 _4 _6)
		)
# 2577 "parser.ml"
               : 'OpSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Identifier_Or_List) in
    Obj.repr(
# 436 "parser.mly"
  ( (fst _2, Sem.make_or_op _2 _4) )
# 2586 "parser.ml"
               : 'OpSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'LocatedID) in
    Obj.repr(
# 438 "parser.mly"
  ( raise (Irg.SyntaxError "missing '=' or '('") )
# 2594 "parser.ml"
               : 'OpSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ExtendHeader) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AttrDefList) in
    Obj.repr(
# 445 "parser.mly"
  (
			let (syms, pars, cattrs) = _1 in
			let extend_spec s =
				match s with
				| Irg.AND_MODE (id, pars, expr, attrs) ->
					Irg.rm_symbol id;
					Irg.add_symbol id (Irg.AND_MODE (id, pars, expr, attrs @ _2))
				| Irg.AND_OP (id, pars, attrs) ->
					Irg.rm_symbol id;
					Irg.add_symbol id (Irg.AND_OP (id, pars, attrs @ _2));
				| _ -> () in
			Irg.param_unstack pars;
			Irg.attr_unstack _2;
			Irg.attr_unstack cattrs;
			List.iter extend_spec syms
		)
# 2617 "parser.ml"
               : 'ExtendSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ExtendIDList) in
    Obj.repr(
# 465 "parser.mly"
                     ( let (_, pars, attrs) = _2 in Irg.attr_stack attrs; Irg.param_stack pars; _2 )
# 2624 "parser.ml"
               : 'ExtendHeader))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 471 "parser.mly"
  ( let (sym, pars, attrs) = get_spec_extend _1 in ([sym], pars, attrs) )
# 2631 "parser.ml"
               : 'ExtendIDList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ExtendIDList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 473 "parser.mly"
  (
			let (sym, spars, sattrs) = get_spec_extend _3 in
			let (syms, pars, attrs) = _1 in
			(sym::syms, intersect_params pars spars, intersect_attrs sattrs attrs)
		)
# 2643 "parser.ml"
               : 'ExtendIDList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 483 "parser.mly"
           ( [_1] )
# 2650 "parser.ml"
               : 'Identifier_Or_List))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Identifier_Or_List) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 484 "parser.mly"
                                ( _3::_1 )
# 2658 "parser.ml"
               : 'Identifier_Or_List))
; (fun __caml_parser_env ->
    Obj.repr(
# 488 "parser.mly"
                  ( [] )
# 2664 "parser.ml"
               : 'ParamList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ParamListPart) in
    Obj.repr(
# 489 "parser.mly"
                    ( Irg.add_param _1; [_1] )
# 2671 "parser.ml"
               : 'ParamList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ParamList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ParamListPart) in
    Obj.repr(
# 490 "parser.mly"
                                ( Irg.add_param _3; _3::_1 )
# 2679 "parser.ml"
               : 'ParamList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ParaType) in
    Obj.repr(
# 494 "parser.mly"
                       ( Sem.check_param_exists _1; (_1, _3) )
# 2687 "parser.ml"
               : 'ParamListPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TypeExpr) in
    Obj.repr(
# 498 "parser.mly"
          ( Irg.TYPE_EXPR _1 )
# 2694 "parser.ml"
               : 'ParaType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 499 "parser.mly"
      ( Irg.TYPE_ID _1 )
# 2701 "parser.ml"
               : 'ParaType))
; (fun __caml_parser_env ->
    Obj.repr(
# 503 "parser.mly"
               ( [] )
# 2707 "parser.ml"
               : 'AttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NOAttrDefList) in
    Obj.repr(
# 504 "parser.mly"
                  ( _1 )
# 2714 "parser.ml"
               : 'AttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AttrDef) in
    Obj.repr(
# 508 "parser.mly"
              ( Irg.add_attr _1; [_1] )
# 2721 "parser.ml"
               : 'NOAttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'NOAttrDefList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AttrDef) in
    Obj.repr(
# 509 "parser.mly"
                        ( Irg.add_attr _2; _2::_1 )
# 2729 "parser.ml"
               : 'NOAttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 515 "parser.mly"
  ( Irg.ATTR_EXPR (_1, _3) )
# 2737 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'Sequence) in
    Obj.repr(
# 517 "parser.mly"
  ( let r = Irg.ATTR_STAT (_1, _4) in Sem.reset_local (); r )
# 2745 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AttrExpr) in
    Obj.repr(
# 519 "parser.mly"
  ( Irg.ATTR_EXPR  ("syntax", (Sem.change_string_dependences "syntax" _3)) )
# 2752 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AttrExpr) in
    Obj.repr(
# 521 "parser.mly"
  ( Irg.ATTR_EXPR  ("image", (Sem.change_string_dependences "image" _3)) )
# 2759 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'Sequence) in
    Obj.repr(
# 523 "parser.mly"
  ( let r = Irg.ATTR_STAT ("action", _4) in Sem.reset_local (); r )
# 2766 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'UsesDef) in
    Obj.repr(
# 525 "parser.mly"
  ( Irg.ATTR_USES )
# 2773 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 527 "parser.mly"
  ( raise (Irg.SyntaxError "attributes only accept expressions, { } actions or use clauses.") )
# 2780 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 529 "parser.mly"
   ( raise (Irg.SyntaxError "missing '=' in attribute definition") )
# 2787 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 534 "parser.mly"
  ( eline _1 )
# 2794 "parser.ml"
               : 'AttrExpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 590 "parser.mly"
             ( Irg.NOP )
# 2800 "parser.ml"
               : 'Sequence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'StatementList) in
    Obj.repr(
# 591 "parser.mly"
                     ( _1 )
# 2807 "parser.ml"
               : 'Sequence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Statement) in
    Obj.repr(
# 596 "parser.mly"
  ( line _1 )
# 2814 "parser.ml"
               : 'StatementList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'StatementList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Statement) in
    Obj.repr(
# 598 "parser.mly"
  ( handle_stat (fun _ -> Irg.SEQ (_1, line _3)) )
# 2822 "parser.ml"
               : 'StatementList))
; (fun __caml_parser_env ->
    Obj.repr(
# 603 "parser.mly"
  ( Irg.NOP )
# 2828 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 605 "parser.mly"
  ( Irg.EVAL ("", "action") )
# 2834 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 607 "parser.mly"
  ( Irg.EVAL ("", _1) )
# 2841 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 609 "parser.mly"
  ( raise (Irg.SyntaxError (Printf.sprintf "unreduced macro '%s'" _1)) )
# 2848 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 611 "parser.mly"
  ( Irg.EVAL (_1, "action")  )
# 2855 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 613 "parser.mly"
  ( Irg.EVAL (_1, _3) )
# 2863 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Location) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 615 "parser.mly"
  ( handle_stat (fun _ -> Sem.make_set _1 _3) )
# 2871 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ConditionalStatement) in
    Obj.repr(
# 617 "parser.mly"
  ( _1 )
# 2878 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ArgList) in
    Obj.repr(
# 619 "parser.mly"
  ( Sem.test_canonical _1; Sem.build_canonical_stat _1 (List.rev _3) )
# 2886 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 621 "parser.mly"
  ( handle_stat (fun _ -> Irg.ERROR _3) )
# 2893 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 623 "parser.mly"
  ( handle_stat (fun _ -> Sem.make_local _2 _4) )
# 2902 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 625 "parser.mly"
  ( handle_stat (fun _ -> Sem.make_typed_local _2 _4 _6) )
# 2912 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'ForHeader) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Sequence) in
    Obj.repr(
# 627 "parser.mly"
  ( handle_stat (fun _ -> Sem.make_for _1 _3) )
# 2920 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 632 "parser.mly"
  ( Sem.prepare_for _2 Irg.NO_TYPE _4 _6 )
# 2929 "parser.ml"
               : 'ForHeader))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 634 "parser.mly"
  ( Sem.prepare_for _2 _4 _6 _8 )
# 2939 "parser.ml"
               : 'ForHeader))
; (fun __caml_parser_env ->
    Obj.repr(
# 638 "parser.mly"
             ( [] )
# 2945 "parser.ml"
               : 'ArgList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 639 "parser.mly"
       ( [_1] )
# 2952 "parser.ml"
               : 'ArgList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ArgList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 640 "parser.mly"
                      ( _3::_1 )
# 2960 "parser.ml"
               : 'ArgList))
; (fun __caml_parser_env ->
    Obj.repr(
# 645 "parser.mly"
  ( None )
# 2966 "parser.ml"
               : 'Opt_Bit_Optr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'Bit_Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 647 "parser.mly"
  ( None )
# 2974 "parser.ml"
               : 'Opt_Bit_Optr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 652 "parser.mly"
  ( Sem.make_access_loc _1 Irg.NONE Irg.NONE Irg.NONE )
# 2981 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Bit_Expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 654 "parser.mly"
  ( Sem.make_access_loc _1 Irg.NONE _3 _5 )
# 2990 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 656 "parser.mly"
  ( Sem.make_access_loc _1 _3 Irg.NONE Irg.NONE )
# 2998 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'Expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'Bit_Expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 658 "parser.mly"
  ( Sem.make_access_loc _1 _3 _6 _8 )
# 3008 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Location) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Location) in
    Obj.repr(
# 660 "parser.mly"
  ( Sem.make_concat_loc _1 _3 )
# 3016 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Location) in
    Obj.repr(
# 662 "parser.mly"
   ( _2 )
# 3023 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Sequence) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'OptionalElse) in
    Obj.repr(
# 668 "parser.mly"
  ( Irg.IF_STAT (_2, _4, _5) )
# 3032 "parser.ml"
               : 'ConditionalStatement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Sequence) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'OptionalElse) in
    Obj.repr(
# 670 "parser.mly"
  ( raise (Irg.SyntaxError "missing endif") )
# 3041 "parser.ml"
               : 'ConditionalStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'Expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'CaseBody) in
    Obj.repr(
# 672 "parser.mly"
  (Irg.SWITCH_STAT (_3, fst _6, snd _6))
# 3049 "parser.ml"
               : 'ConditionalStatement))
; (fun __caml_parser_env ->
    Obj.repr(
# 675 "parser.mly"
             ( Irg.NOP )
# 3055 "parser.ml"
               : 'OptionalElse))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Sequence) in
    Obj.repr(
# 676 "parser.mly"
                ( _2 )
# 3062 "parser.ml"
               : 'OptionalElse))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseList) in
    Obj.repr(
# 681 "parser.mly"
          ( (_1,Irg.NOP) )
# 3069 "parser.ml"
               : 'CaseBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'OptCaseList) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Default) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'OptCaseList) in
    Obj.repr(
# 682 "parser.mly"
                                  ( (_1@_3,_2) )
# 3078 "parser.ml"
               : 'CaseBody))
; (fun __caml_parser_env ->
    Obj.repr(
# 685 "parser.mly"
             ( [] )
# 3084 "parser.ml"
               : 'OptCaseList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseList) in
    Obj.repr(
# 686 "parser.mly"
           ( _1 )
# 3091 "parser.ml"
               : 'OptCaseList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseStat) in
    Obj.repr(
# 690 "parser.mly"
             ( [_1]	)
# 3098 "parser.ml"
               : 'CaseList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'CaseList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'CaseStat) in
    Obj.repr(
# 691 "parser.mly"
                     ( _2::_1 )
# 3106 "parser.ml"
               : 'CaseList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Sequence) in
    Obj.repr(
# 694 "parser.mly"
                          ( (_2,_4) )
# 3114 "parser.ml"
               : 'CaseStat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Sequence) in
    Obj.repr(
# 698 "parser.mly"
                        (_3)
# 3121 "parser.ml"
               : 'Default))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 704 "parser.mly"
  ( handle_expr (fun _ -> Sem.make_coerce _3 _5) )
# 3129 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 706 "parser.mly"
  ( syntax_error "syntax error in coerce expression" )
# 3135 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'ArgList) in
    Obj.repr(
# 708 "parser.mly"
  ( eline (Sem.build_format _3 _5) )
# 3143 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 710 "parser.mly"
  ( syntax_error "syntax error in format expression" )
# 3149 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ArgList) in
    Obj.repr(
# 712 "parser.mly"
  ( eline (Sem.make_canon_expr _1 (List.rev _3)) )
# 3157 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 714 "parser.mly"
  (	if Irg.is_defined _1
			then eline (Irg.FIELDOF (Irg.STRING, _1,"syntax"))
			else error (Irg.asis (Printf.sprintf "the keyword %s is undefined\n" _1)) )
# 3166 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 718 "parser.mly"
  (	if Irg.is_defined _1
			then eline (Irg.FIELDOF (Irg.STRING, _1,"image"))
			else error (Irg.asis (Printf.sprintf "the keyword %s is undefined\n" _1)) )
# 3175 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 722 "parser.mly"
  ( eline (Irg.FIELDOF(Sem.type_of_field _1 _3, _1, _3)) )
# 3183 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 724 "parser.mly"
  (
			eline (Sem.get_binop _1 _3 Irg.CONCAT)
		)
# 3193 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 728 "parser.mly"
  ( handle_expr (fun _ -> Sem.make_ref (Sem.unalias_local _1)) )
# 3200 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 730 "parser.mly"
  ( raise (Irg.SyntaxError "unreduced macro here") )
# 3207 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 732 "parser.mly"
  (
		let id = Sem.unalias_local _1 in
		if Irg.is_defined id then
			if (Sem.is_location id) || (Sem.is_loc_spe id)  || (Sem.is_loc_mode id)
				then
					eline (Irg.ITEMOF ((Sem.get_type_ident id), id, _3))
				else
					Irg.error (Irg.output [Irg.PTEXT _1; Irg.PTEXT " is not a valid location: type is "])
		else Irg.error (Irg.asis (Printf.sprintf "the keyword %s is undefined\n" _1))
		)
# 3224 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 743 "parser.mly"
  ( syntax_error "unclosed bracket expression" )
# 3231 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Bit_Expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 745 "parser.mly"
  ( handle_expr (fun _ -> Sem.make_bitfield _1 _3 _5) )
# 3240 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 747 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.ADD) )
# 3248 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 749 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.SUB) )
# 3256 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 751 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.MUL) )
# 3264 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 753 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.DIV) )
# 3272 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 755 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.MOD) )
# 3280 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 757 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.EXP) )
# 3288 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 759 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.LSHIFT) )
# 3296 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 761 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.RSHIFT) )
# 3304 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 763 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.LROTATE) )
# 3312 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 765 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.RROTATE) )
# 3320 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 767 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.LT) )
# 3328 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 769 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.GT) )
# 3336 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 771 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.LE) )
# 3344 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 773 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.GE) )
# 3352 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 775 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.EQ) )
# 3360 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 777 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.NE) )
# 3368 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 779 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.BIN_AND) )
# 3376 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 781 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.BIN_XOR) )
# 3384 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 783 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.BIN_OR) )
# 3392 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 785 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_unop _2 Irg.NOT) )
# 3399 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 787 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_unop _2 Irg.BIN_NOT) )
# 3406 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 789 "parser.mly"
  ( _2 )
# 3413 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 791 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_unop _2 Irg.NEG) )
# 3420 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 793 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.AND) )
# 3428 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 795 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.OR) )
# 3436 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 797 "parser.mly"
  ( _2 )
# 3443 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 799 "parser.mly"
  ( syntax_error "no expression after '('" )
# 3449 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 801 "parser.mly"
  ( syntax_error "unclosed '('" )
# 3456 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 803 "parser.mly"
  ( handle_expr (fun _ -> Sem.make_if_expr _2 _4 _6) )
# 3465 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 805 "parser.mly"
  ( syntax_error "malformed if expression" )
# 3471 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'Expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'CaseExprBody) in
    Obj.repr(
# 807 "parser.mly"
  ( handle_expr (fun _ -> Sem.make_switch_expr _3 (fst _6) (snd _6)) )
# 3479 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 809 "parser.mly"
  ( syntax_error "malformed switch expression" )
# 3485 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Constant) in
    Obj.repr(
# 811 "parser.mly"
  ( eline (Irg.CONST (fst _1, snd _1)) )
# 3492 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 817 "parser.mly"
  ( (Irg.FLOAT(23, 9), Irg.FIXED_CONST  _1) )
# 3499 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int32.t) in
    Obj.repr(
# 820 "parser.mly"
  ( (Irg.CARD 32, Irg.CARD_CONST _1) )
# 3506 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int64.t) in
    Obj.repr(
# 822 "parser.mly"
  ( (Irg.CARD 64, Irg.CARD_CONST_64 _1) )
# 3513 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int32.t * int) in
    Obj.repr(
# 824 "parser.mly"
  ( (Irg.CARD (snd _1), Irg.CARD_CONST (fst _1)) )
# 3520 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int64.t * int) in
    Obj.repr(
# 826 "parser.mly"
  ( (Irg.CARD (snd _1), Irg.CARD_CONST_64 (fst _1)) )
# 3527 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 828 "parser.mly"
  (
			if  (Irg.is_defined_canon _1) then
				(Sem.test_canonical _1;
				let e = Irg.get_canon _1 in
					(e.Irg.type_res, Irg.CANON(_1)))
			else
				(Irg.STRING, Irg.STRING_CONST(_1))
		)
# 3541 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 843 "parser.mly"
  ( Sem.make_ref _1 )
# 3548 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 845 "parser.mly"
  ( eline (Sem.get_unop _2 Irg.NEG) )
# 3555 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 847 "parser.mly"
  ( _2 )
# 3562 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 849 "parser.mly"
  ( eline (Sem.get_unop _2 Irg.BIN_NOT) )
# 3569 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 851 "parser.mly"
  ( eline (Sem.get_binop _1 _3 Irg.ADD) )
# 3577 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 853 "parser.mly"
  ( eline (Sem.get_binop _1 _3 Irg.SUB) )
# 3585 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 855 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.MUL) )
# 3593 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 857 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.DIV) )
# 3601 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 859 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.MOD) )
# 3609 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 861 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.EXP) )
# 3617 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 863 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.BIN_AND) )
# 3625 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 865 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.BIN_OR) )
# 3633 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 867 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.BIN_XOR) )
# 3641 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 869 "parser.mly"
  ( _2 )
# 3648 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 871 "parser.mly"
  ( eline (Irg.CONST (Irg.FIX(8,24),Irg.FIXED_CONST _1)) )
# 3655 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int32.t) in
    Obj.repr(
# 873 "parser.mly"
  ( eline (Irg.CONST (Irg.CARD 32,Irg.CARD_CONST _1)) )
# 3662 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 875 "parser.mly"
  (
			if  (Irg.is_defined_canon _1) then
				(Sem.test_canonical _1;
				let e = Irg.get_canon _1 in
					eline (Irg.CONST (e.Irg.type_res, Irg.CANON(_1))))
			else
				eline (Irg.CONST (Irg.STRING, Irg.STRING_CONST(_1)))
		)
# 3676 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseExprList) in
    Obj.repr(
# 887 "parser.mly"
              ( (_1,Irg.NONE) )
# 3683 "parser.ml"
               : 'CaseExprBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'OptCaseExprList) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ExprDefault) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'OptCaseExprList) in
    Obj.repr(
# 888 "parser.mly"
                                              ( (_1@_3,_2) )
# 3692 "parser.ml"
               : 'CaseExprBody))
; (fun __caml_parser_env ->
    Obj.repr(
# 892 "parser.mly"
            ( [] )
# 3698 "parser.ml"
               : 'OptCaseExprList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseExprList) in
    Obj.repr(
# 893 "parser.mly"
               ( _1 )
# 3705 "parser.ml"
               : 'OptCaseExprList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseExprStat) in
    Obj.repr(
# 897 "parser.mly"
              ( [_1] )
# 3712 "parser.ml"
               : 'CaseExprList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'CaseExprList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'CaseExprStat) in
    Obj.repr(
# 898 "parser.mly"
                              ( _2::_1 )
# 3720 "parser.ml"
               : 'CaseExprList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 902 "parser.mly"
                      ( (_2,_4) )
# 3728 "parser.ml"
               : 'CaseExprStat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 906 "parser.mly"
                    ( _3 )
# 3735 "parser.ml"
               : 'ExprDefault))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesOrSequence) in
    Obj.repr(
# 921 "parser.mly"
                ( )
# 3742 "parser.ml"
               : 'UsesDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'UsesDef) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'UsesOrSequence) in
    Obj.repr(
# 922 "parser.mly"
                               ( )
# 3750 "parser.ml"
               : 'UsesDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesIfAtom) in
    Obj.repr(
# 926 "parser.mly"
               ( )
# 3757 "parser.ml"
               : 'UsesOrSequence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'UsesOrSequence) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'UsesIfAtom) in
    Obj.repr(
# 927 "parser.mly"
                                 ( )
# 3765 "parser.ml"
               : 'UsesOrSequence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesIndirectAtom) in
    Obj.repr(
# 931 "parser.mly"
                  ( )
# 3772 "parser.ml"
               : 'UsesIfAtom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'UsesIfAtom) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'OptionalElseAtom) in
    Obj.repr(
# 932 "parser.mly"
                                                 ( )
# 3781 "parser.ml"
               : 'UsesIfAtom))
; (fun __caml_parser_env ->
    Obj.repr(
# 936 "parser.mly"
             ( )
# 3787 "parser.ml"
               : 'OptionalElseAtom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'UsesIfAtom) in
    Obj.repr(
# 937 "parser.mly"
                  ( )
# 3794 "parser.ml"
               : 'OptionalElseAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesCondAtom) in
    Obj.repr(
# 941 "parser.mly"
              ( )
# 3801 "parser.ml"
               : 'UsesIndirectAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 942 "parser.mly"
                ( )
# 3808 "parser.ml"
               : 'UsesIndirectAtom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'UsesDef) in
    Obj.repr(
# 943 "parser.mly"
                        ( )
# 3815 "parser.ml"
               : 'UsesIndirectAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'UsesLocationList) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 944 "parser.mly"
                                      ( )
# 3823 "parser.ml"
               : 'UsesIndirectAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'UsesLocationList) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'UsesDef) in
    Obj.repr(
# 945 "parser.mly"
                                                ( )
# 3831 "parser.ml"
               : 'UsesIndirectAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesAndAtom) in
    Obj.repr(
# 949 "parser.mly"
             ( )
# 3838 "parser.ml"
               : 'UsesCondAtom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'UsesAndAtom) in
    Obj.repr(
# 950 "parser.mly"
                                 ( )
# 3846 "parser.ml"
               : 'UsesCondAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'UsesLocationList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'UsesActionList) in
    Obj.repr(
# 954 "parser.mly"
                                   ( )
# 3854 "parser.ml"
               : 'UsesAndAtom))
; (fun __caml_parser_env ->
    Obj.repr(
# 958 "parser.mly"
              ( )
# 3860 "parser.ml"
               : 'UsesActionList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ActionTimeList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'OptionalAction) in
    Obj.repr(
# 959 "parser.mly"
                                ( )
# 3868 "parser.ml"
               : 'UsesActionList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'TimeActionList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'OptionalTime) in
    Obj.repr(
# 960 "parser.mly"
                               ( )
# 3876 "parser.ml"
               : 'UsesActionList))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 964 "parser.mly"
                          ( )
# 3883 "parser.ml"
               : 'ActionTimeList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'ActionTimeList) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'UsesActionAttr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 965 "parser.mly"
                                                                ( )
# 3892 "parser.ml"
               : 'ActionTimeList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'UsesActionAttr) in
    Obj.repr(
# 969 "parser.mly"
                      ( )
# 3899 "parser.ml"
               : 'TimeActionList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'TimeActionList) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'UsesActionAttr) in
    Obj.repr(
# 970 "parser.mly"
                                                                ( )
# 3908 "parser.ml"
               : 'TimeActionList))
; (fun __caml_parser_env ->
    Obj.repr(
# 974 "parser.mly"
             ( )
# 3914 "parser.ml"
               : 'OptionalAction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'UsesActionAttr) in
    Obj.repr(
# 975 "parser.mly"
                       ( )
# 3921 "parser.ml"
               : 'OptionalAction))
; (fun __caml_parser_env ->
    Obj.repr(
# 979 "parser.mly"
             ( )
# 3927 "parser.ml"
               : 'OptionalTime))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 980 "parser.mly"
                           ( )
# 3934 "parser.ml"
               : 'OptionalTime))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 984 "parser.mly"
      ( )
# 3941 "parser.ml"
               : 'UsesActionAttr))
; (fun __caml_parser_env ->
    Obj.repr(
# 985 "parser.mly"
            ( )
# 3947 "parser.ml"
               : 'UsesActionAttr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesLocation) in
    Obj.repr(
# 989 "parser.mly"
              ( )
# 3954 "parser.ml"
               : 'UsesLocationList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'UsesLocationList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'UsesLocation) in
    Obj.repr(
# 990 "parser.mly"
                                         ( )
# 3962 "parser.ml"
               : 'UsesLocationList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Opt_Bit_Optr) in
    Obj.repr(
# 994 "parser.mly"
                 ( )
# 3970 "parser.ml"
               : 'UsesLocation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Opt_SecDim) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Opt_Bit_Optr) in
    Obj.repr(
# 995 "parser.mly"
                                                ( )
# 3980 "parser.ml"
               : 'UsesLocation))
; (fun __caml_parser_env ->
    Obj.repr(
# 999 "parser.mly"
              ( )
# 3986 "parser.ml"
               : 'Opt_SecDim))
; (fun __caml_parser_env ->
    Obj.repr(
# 1000 "parser.mly"
                ( )
# 3992 "parser.ml"
               : 'Opt_SecDim))
(* Entry top *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let top (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
